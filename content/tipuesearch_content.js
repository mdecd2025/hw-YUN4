var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:  https://mdecd2025.github.io/hw-YUN4/content/index.html \n 學員作業倉儲:  https://github.com/mdecd2025/hw-YUN4 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Task', 'text': '', 'tags': '', 'url': 'Task.html'}, {'title': 'Task1', 'text': '將舊python改成新版本的操作影片 \n 影片1 \n 影片2 \n', 'tags': '', 'url': 'Task1.html'}, {'title': 'list', 'text': 'list \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': 'list.html'}, {'title': 'task2', 'text': 'list \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task2-2', 'text': 'list \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'task2-2.html'}, {'title': 'task2-3', 'text': 'list \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': 'task2-3.html'}, {'title': 'task3', 'text': '四連桿slvs \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task5', 'text': 'webot是什麼? \n \n \n \n Webots 是一款專業的開源 3D 機器人模擬軟體，廣泛應用於工業、教育與研究領域。   它提供了一個完整的開發環境，用於建模、程式設計與模擬機器人。   用戶可以創建具有質量、關節、摩擦係數等物理屬性的 3D 虛擬世界，並在其中添加被動或主動物體，如輪式、腿式或飛行機器人。   這些機器人可以配備各種感測器與致動器，如距離感測器、驅動輪、相機、馬達、觸碰感測器、發射器、接收器等，並可獨立編程以實現所需行為。 \n \n webot的應用範圍 \n Webots 適用於以下領域： \n \n \n 機器人原型開發（學術研究、汽車工業、航空、吸塵器產業、玩具產業、愛好者等） \n \n \n 機器人運動學研究（四足、仿人、四輪機器人等） \n \n \n 多智能體研究（群體智慧、協作機器人群體等） \n \n \n 自適應行為研究（遺傳演算法、神經網路、人工智慧等） \n \n \n 機器人教學（機器人學課程、C/C++/Java/Python 程式設計課程等） \n \n \n 機器人競賽（如 Robotstadium 或 Rat\'s Life） \n \n \n \n webot的組成 \n Webots 模擬由以下部分組成： \n \n \n 世界檔案（.wbt） ： 定義機器人及其環境的 3D 描述，包含物體的位置信息、幾何形狀、外觀、物理屬性等。 \n \n \n 控制器程式 ： 用於控制機器人的程式，可使用 C、C++、Java、Python 或 MATLAB 編寫。 \n \n \n 可選的物理插件 ： 用於修改 Webots 常規物理行為的插件（C/C++ 編寫）。 \n \n \n \n \n 重要英文單字與用法範例 \n \n \n \n 英文單字 \n 中文解釋 \n 用法範例 \n \n \n \n \n Simulation \n 模擬 \n "Webots allows users to create 3D virtual worlds for robot simulation." \n \n \n Controller \n 控制器 \n "Each robot in Webots requires a controller program to define its behavior." \n \n \n Sensor \n 感測器 \n "Webots supports various sensors like cameras and distance sensors." \n \n \n Actuator \n 致動器 \n "Actuators in Webots can include motors and wheels." \n \n \n Prototype \n 原型 \n "Webots is widely used for robot prototyping in academia and industry." \n \n \n Environment \n 環境 \n "Users can design indoor or outdoor environments in Webots." \n \n \n Interface \n 介面 \n "Webots provides interfaces to real mobile robots for testing." \n \n \n VRML97 \n 一種 3D 圖形描述語言 \n "Worlds in Webots can be described using VRML97." \n \n \n Supervisor \n 監控器 \n "The Supervisor controller can perform operations not possible for regular robots." \n \n \n \n \n \n 英文文法逐句解析 \n \n \n "Webots is a professional mobile robot simulation software package." \n 文法結構 ： 主詞 + be 動詞 + 名詞片語。 \n \n \n \n \n \n 解析 ： 此句為簡單的陳述句，介紹 Webots 是一款專業的移動機器人模擬軟體。 \n \n \n \n \n "It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc." \n \n \n 文法結構 ： 主詞 + 動詞 + 名詞片語，後接關係子句。 \n \n \n 解析 ： 此句描述 Webots 提供快速原型開發環境，並進一步說明該環境的功能。 "The user can add simple passive objects or active objects called mobile robots." \n \n \n \n \n \n \n 文法結構 ： 主詞 + modal 動詞 + 動詞原形 + 名詞片語。 \n \n \n 解析 ： 此句說明用戶可以添加簡單的被動物體或稱為移動機器人的主動物體。 \n \n \n \n \n 手動建立webot場景的步驟 \n 目標場景範例： 建立一個簡單的地面環境，場景中包含： 一個平坦地板 一個機器人（預設為 e-puck） 一個障礙物（例如立方體） 一個基本的控制器（空的 Python 程式） 🛠 建立步驟詳解（GUI 操作流程）\xa0 \n  1. 啟動 Webots 並建立新世界 開啟 Webots。 點選上方選單 File > New World（檔案 > 新建世界）。 新建世界會出現一個空白的地板（通常已包含 WorldInfo, Viewpoint, TexturedBackground, TexturedSkybox 等預設元件）。  \n 2. 新增一個平坦地面 在 Scene Tree（場景樹） 視窗中，右鍵點選 root → 選擇 Add > Floor。 點選剛剛新增的 Floor 節點，在右側「Field」視窗中可設定： size：如 [5, 5] 表示寬 5m、長 5m。 appearance：可以改成 PBRAppearance 改變材質。 注意： 不要放置太小的地板，機器人容易掉出模擬範圍。\xa0  \n 3. 加入機器人（以 e-puck 為例） 在 root 節點上再次右鍵 → Add > Robot。 在彈出的模型清單中選擇 e-puck。 點選該機器人節點，在 controller 欄位輸入控制器名稱，例如：my_controller（稍後會自動產生此程式）。\xa0 注意： 若控制器名稱未填寫，機器人不會執行任何程式。 一個機器人只能有一個控制器。\xa0  \n 4. 加入障礙物（例如方塊） 在 root 上右鍵 → Add > Solid。 點選新增的 Solid 節點，並命名為 Obstacle。 在 boundingObject 中加入一個立方體碰撞體： 點選 boundingObject → Add > Box。 設定大小為 [0.2, 0.2, 0.2]（20cm 正立方體）。 在 children 欄位中 → Add > Shape > Appearance > PBRAppearance 改變顏色或材質。\xa0  \n 5. 建立控制器程式 儲存你的世界（File > Save World As...）。 點選上方 Wizards > New Robot Controller。 選擇你先前輸入的控制器名稱（例如 my_controller）。 語言選擇 Python。 系統會幫你建立一個初始的 Python 控制器，包含迴圈與基本 API。\xa0  \n 6. 執行模擬 點選工具列中的「播放」按鈕 開始模擬。 可在底下控制台觀察輸出訊息。 若控制器為空，可以加入簡單的移動程式碼 \n 建立場景時的注意事項 注意點   說明 地板大小   太小的地板會讓機器人掉落出模擬範圍 控制器名稱   必須與建立的程式名稱一致，否則無法執行 Robot 模型位置   放置時機器人若重疊其他物體會出錯，可稍微抬高 translation.z Solid 必須有碰撞體   boundingObject 未設定會導致無法互動或穿透 \n', 'tags': '', 'url': 'task5.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n hw1 world檔 \n \n 操作影片 \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'Tutorial1', 'text': '在製作 HW1 之前是否實際練習 Tutorial1 與 Tutorial2? \n data-end="337" data-start="148"> 是的，建議在進行 HW1 之前，先完成 Webots 的 Tutorial1 和 Tutorial2。 這些教程提供了基本的操作和編程知識，有助於熟悉 Webots 的使用。 例如，Tutorial1 介紹了如何建立並執行一個新的模擬世界，以及如何控制機器人移動。 Tutorial2 則進一步探討了感測器的使用和避障策略。 \n 2.Webots 是什麼樣的軟體？它主要用途為何？ \n Webots 是一款免費且開源的 3D 機器人模擬器，廣泛應用於學術研究、教育和工業領域。 它支援多種機器人模型、感測器和致動器，並允許使用者編寫控制器來模擬機器人的行為。 Webots 支援多種程式語言，包括 C、C++、Python、Java、MATLAB 和 ROS。 \n \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': '3. 在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？', 'text': '在 Tutorial1 中，學習者通常會使用名為 "e-puck" 的機器人模型。 這是一款小型的差速驅動機器人，適合用於學習基本的控制和感測器操作。 \n \n', 'tags': '', 'url': '3. 在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？.html'}, {'title': '4. 如何在 Webots 中建立並執行一個新的模擬世界（world）？', 'text': '在 Webots 中建立並執行新的模擬世界的步驟如下： tinymal.cn \n \n \n 打開 Webots，選擇 "File" > "New World"。 \n \n \n 在彈出的對話框中，選擇一個模板或從頭開始建立。 \n \n \n 在世界中添加所需的物件，如地面、障礙物和機器人。 \n \n \n 為機器人指定控制器。 \n \n \n 點擊 "Play" 按鈕開始模擬。 iter01.com \n \n \n \n', 'tags': '', 'url': '4. 如何在 Webots 中建立並執行一個新的模擬世界（world）？.html'}, {'title': '5. 請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。', 'text': '要讓機器人在模擬中移動，需要控制其馬達。 以下是使用 Python 語言控制 e-puck 機器人移動的範例程式碼： \n \n python \n from  controller  import  Robot TIME_STEP =  32  robot = Robot() left_motor = robot.getDevice( "left wheel motor" ) right_motor = robot.getDevice( "right wheel motor" ) left_motor.setPosition( float ( \'inf\' )) right_motor.setPosition( float ( \'inf\' )) left_motor.setVelocity( 1.0 ) right_motor.setVelocity( 1.0 )  while  robot.step(TIME_STEP) != - 1 :  pass   \n \n \n 這段程式碼使機器人以固定速度前進。 \n \n', 'tags': '', 'url': '5. 請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。.html'}, {'title': '6. Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？', 'text': '在 Tutorial1 中，學習者需要編輯控制器程式碼，通常是 Python 或 C 語言檔案。 透過修改控制器中的參數，如馬達速度、感測器閾值等，來控制機器人的行為。 \n \n', 'tags': '', 'url': '6. Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？.html'}, {'title': '7. 請簡述 Webots 控制器（controller）的功能及其與機器人的關係。', 'text': 'Webots 控制器是用來控制機器人行為的程式。 它通過讀取感測器數據並根據這些數據調整馬達輸出，來實現機器人的各種行為。 控制器與機器人之間的關係是，控制器作為機器人的大腦，負責決策和行動。 \n \n', 'tags': '', 'url': '7. 請簡述 Webots 控制器（controller）的功能及其與機器人的關係。.html'}, {'title': '8. 在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？', 'text': '在 Tutorial2 中，機器人需要使用感測器（如距離感測器）來避開障礙物。 這通常涉及讀取感測器數據，並根據這些數據調整機器人的運動策略。 iter01.com \n \n 9. Webots 中的 "Supervisor" 是什麼？它與一般機器人控制器有何不同？ \n "Supervisor" 是一種特殊的控制器，具有更高的權限，能夠控制模擬世界中的所有元素。 與一般控制器只能控制指定機器人不同，Supervisor 可以讀取和修改世界中的節點、感測器和其他物件的屬性。 \n \n', 'tags': '', 'url': '8. 在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？.html'}, {'title': '10. 請說明如何在 Webots 中進行感測器數據的讀取與應用（例如距離感測器、攝影機）。', 'text': '在 Webots 中，感測器數據的讀取通常包括以下步驟： \n \n \n 獲取感測器裝置： iter01.com \n \n python \n \n \n \n \n \n distance_sensor = robot.getDevice( "distance_sensor" )  \n \n \n \n \n \n \n 使能感測器： iter01.com +1 blog.csdn.net +1 \n \n python \n \n \n \n \n \n distance_sensor.enable(TIME_STEP)  \n \n \n \n \n \n \n 讀取數據： \n \n python \n \n \n \n \n \n value = distance_sensor.getValue()  \n \n \n \n \n \n \n 根據讀取的數據進行應用，如避障。 \n \n \n \n', 'tags': '', 'url': '10. 請說明如何在 Webots 中進行感測器數據的讀取與應用（例如距離感測器、攝影機）。.html'}, {'title': '11. 若要延伸 Tutorial2 讓機器人具備自主避障能力，你會怎麼設計與實作？', 'text': '要讓機器人具備自主避障能力，可以採用以下策略： \n \n \n 使用多個距離感測器來檢測周圍的障礙物。 \n \n \n 根據感測器數據決定機器人的行進方向。 \n \n \n 如果前方有障礙物，則改變方向或停止前進。 iter01.com \n \n \n 以下是使用 Python 語言實現簡單避障的範例程式碼： \n \n python \n \n \n \n \n \n from  controller  import  Robot TIME_STEP =  32  robot = Robot() left_motor = robot.getDevice( "left wheel motor" ) right_motor = robot.getDevice( "right wheel motor" ) left_motor.setPosition( float ( \'inf\' )) right_motor.setPosition( float ( \'inf\' )) left_motor.setVelocity( 1.0 ) right_motor.setVelocity( 1.0 ) distance_sensor = robot.getDevice( "distance_sensor" ) distance_sensor.enable(TIME_STEP)  while  robot.step(TIME_STEP) != - 1 :  if  distance_sensor.getValue() <  1000 : left_motor.setVelocity(- 1.0 ) right_motor.setVelocity(- 1.0 )  else : left_motor.setVelocity( 1.0 ) right_motor.setVelocity( 1.0 )  \n \n \n \n', 'tags': '', 'url': '11. 若要延伸 Tutorial2 讓機器人具備自主避障能力，你會怎麼設計與實作？.html'}, {'title': '12. 請說明 Webots 中「時間步長（timestep）」的意義，以及它對模擬的影響。', 'text': '"時間步長" 是模擬中每次更新的時間間隔。 它影響模擬的精確度和效能。 較短的時間步長可以提高模擬的精確度，但可能會降低效能；較長的時間步長則相反。 在 Webots 中，時間步長通常設定為 32 毫秒。 \n \n', 'tags': '', 'url': '12. 請說明 Webots 中「時間步長（timestep）」的意義，以及它對模擬的影響。.html'}, {'title': '13. 如何在 Webots 中為機器人新增感測器？請說明基本步驟。', 'text': '在 Webots 中為機器人新增感測器的步驟如下： \n \n \n 打開機器人模型的  .wbt  檔案。 \n \n \n 在  <robot>  標籤內，新增感測器節點，如  <distanceSensor> 。 \n \n \n 為感測器指定名稱、位置和方向。 \n \n \n 在控制器程式中，使用  getDevice  方法獲取感測器裝置，並使能它。 \n \n \n', 'tags': '', 'url': '13. 如何在 Webots 中為機器人新增感測器？請說明基本步驟。.html'}, {'title': '14. 如何將 Webots 控制器程式從 Python 改為 C 語言，並指出相關設定？', 'text': '要將控制器程式從 Python 轉換為 C 語言，需進行以下步驟： \n \n \n 建立 C 控制器檔案 ： 在 Webots 專案的  controllers  資料夾中，建立一個新的資料夾，並在其中創建一個  .c  檔案。 \n \n \n 撰寫 C 程式碼 ： 使用 Webots 的 C API 撰寫控制器程式碼，例如： github.com \n \n \n \n c \n \n \n \n \n \n   # include   <webots/robot.h>   # include   <stdio.h>   int   main ()  { wb_robot_init();  while  (wb_robot_step( 32 ) !=  -1 )  printf ( "Hello World!\\n" ); wb_robot_cleanup();  return   0 ; }  \n \n \n \n \n 編譯控制器 ： 根據作業系統的不同，使用相應的編譯器（如 GCC）來編譯 C 程式碼。 \n \n \n 設定控制器 ： 在 Webots 的世界檔案（ .wbt ）中，指定機器人使用剛才編譯的 C 控制器。 \n \n \n \n', 'tags': '', 'url': '14. 如何將 Webots 控制器程式從 Python 改為 C 語言，並指出相關設定？.html'}, {'title': '15. Tutorial1、2 中，若控制器程式有語法錯誤時，Webots 會如何反應？學員該如何排除？', 'text': '當控制器程式有語法錯誤時，Webots 會在啟動模擬時顯示錯誤訊息，並停止該控制器的執行。學員可以： \n \n \n 檢查錯誤訊息 ： 仔細閱讀 Webots 提供的錯誤訊息，定位錯誤位置。 \n \n \n 使用除錯工具 ： 利用 Webots 的 Console 與 Debug 工具，逐步執行程式碼，觀察變數值與執行流程。 \n \n \n 查閱文件 ： 參考 Webots 的官方文件與範例程式碼，確保語法與 API 使用正確。 \n \n \n \n', 'tags': '', 'url': '15. Tutorial1、2 中，若控制器程式有語法錯誤時，Webots 會如何反應？學員該如何排除？.html'}, {'title': '16. 如何將 Webots 世界（world）或機器人設定檔分享給他人，確保對方可順利開啟模擬？', 'text': '分享 Webots 世界或機器人設定檔時，應包含以下內容： \n \n \n 世界檔案（ .wbt ） ： 包含場景與物件配置。 \n \n \n 控制器程式 ： 位於  controllers  資料夾中的程式碼。 \n \n \n 資源檔案 ： 如模型、紋理等，確保路徑正確。 \n \n \n 建議使用壓縮檔（如  .zip ）將整個專案資料夾打包，並分享給他人。 \n \n', 'tags': '', 'url': '16. 如何將 Webots 世界（world）或機器人設定檔分享給他人，確保對方可順利開啟模擬？.html'}, {'title': '17. 如果想讓機器人在模擬時產生聲音或播放音樂，Webots 提供哪些方法？', 'text': 'Webots 支援在模擬中播放聲音或音樂，方法包括： \n \n \n 使用  Sound  節點 ： 在世界檔案中，加入  Sound  節點，指定音效檔案與播放參數。 \n \n \n 控制器中播放音效 ： 在控制器程式中，使用適當的 API 播放音效。 \n \n \n 具體操作可參考 Webots 的官方文件與範例。 \n \n', 'tags': '', 'url': '17. 如果想讓機器人在模擬時產生聲音或播放音樂，Webots 提供哪些方法？.html'}, {'title': '18. 請說明如何在 Webots 中同時操作多個機器人，並讓它們各自執行不同控制器。', 'text': '在 Webots 中操作多個機器人並為其指定不同控制器，步驟如下： \n \n \n 複製機器人 ： 在世界檔案中，複製所需數量的機器人節點。 \n \n \n 指定控制器 ： 在每個機器人節點中，設定  controller  欄位，指定對應的控制器名稱。 \n \n \n 編寫控制器程式 ： 為每個控制器編寫獨立的程式碼，確保其功能不互相干擾。 \n \n \n Webots 會為每個機器人啟動獨立的控制器執行緒，實現並行運行。 \n \n', 'tags': '', 'url': '18. 請說明如何在 Webots 中同時操作多個機器人，並讓它們各自執行不同控制器。.html'}, {'title': '19. 在 Webots 控制器中，如何獲得機器人的當前座標位置與朝向？', 'text': '在 Webots 控制器中，可使用 Supervisor API 來獲取機器人的位置與朝向： \n \n \n 取得位置 ： 使用  wb_supervisor_node_get_position  函數，傳入機器人節點，返回位置向量。 github.com +3 github.com +3 github.com +3 \n \n \n 取得朝向 ： 使用  wb_supervisor_node_get_orientation  函數，傳入機器人節點，返回旋轉矩陣。 \n \n \n 這些資訊有助於進行導航與避障等功能的實現。 \n \n', 'tags': '', 'url': '19. 在 Webots 控制器中，如何獲得機器人的當前座標位置與朝向？.html'}, {'title': '20. 請說明 Webots 控制器中感測器資料的單位（例如距離感測器、加速度計），以及如何正確解讀。', 'text': '在 Webots 中，常見感測器的資料單位如下： \n \n \n 距離感測器 ： 返回與物體的距離，單位為米（m）。 \n \n \n 加速度計 ： 返回加速度數值，單位為公尺每平方秒（m/s²）。 \n \n \n 在解讀感測器資料時，需注意其單位，並根據需要進行轉換與處理。 \n \n', 'tags': '', 'url': '20. 請說明 Webots 控制器中感測器資料的單位（例如距離感測器、加速度計），以及如何正確解讀。.html'}, {'title': '21. 如果想要錄製 Webots 模擬畫面並輸出成影片檔，該如何操作？', 'text': 'Webots 提供錄製模擬畫面的功能，操作步驟如下： \n \n \n 啟動錄製 ： 在 Webots 的工具列中，點擊錄製按鈕，開始錄製模擬畫面。 \n \n \n 停止錄製 ： 錄製完成後，再次點擊錄製按鈕，停止錄製。 \n \n \n 保存影片 ： 系統會提示保存影片檔案，選擇儲存位置與檔名。 \n \n \n 錄製的影片檔案格式為  .avi  或  .mp4 ，可供後續觀看或分享。 \n \n', 'tags': '', 'url': '21. 如果想要錄製 Webots 模擬畫面並輸出成影片檔，該如何操作？.html'}, {'title': '22. Webots 中的 PROTO 文件有什麼作用？與 world 檔（.wbt）的關係為何？', 'text': 'PROTO 文件用於定義自訂的節點類型，具有以下作用： \n \n \n 封裝複雜結構 ： 將多個節點組合成一個自訂節點，方便重複使用。 \n \n \n 參數化設計 ： 透過定義欄位，允許在實例化時設定不同的參數。 \n \n \n 在 world 檔中，可使用  PROTO  節點來實例化這些自訂節點，並設定其參數。 \n \n', 'tags': '', 'url': '22. Webots 中的 PROTO 文件有什麼作用？與 world 檔（.wbt）的關係為何？.html'}, {'title': '23. 請說明如何在 Webots 中設定機器人的初始位置和方向。', 'text': '在 Webots 中，可透過以下方式設定機器人的初始位置與方向： \n \n \n 設定位置 ： 在機器人節點中，設定  translation  欄位，指定初始位置的座標。 \n \n \n 設定方向 ： 在機器人節點中，設定  rotation  欄位，指定初始朝向的旋轉角度。 \n \n \n 這些設定會在模擬開始時生效，決定機器人的起始狀態。 \n \n', 'tags': '', 'url': '23. 請說明如何在 Webots 中設定機器人的初始位置和方向。.html'}, {'title': '24. 在 Tutorial1 或 Tutorial2 中，如何讓機器人執行預設外的自訂動作？', 'text': '要讓機器人執行自訂動作，可進行以下操作： \n \n \n 修改控制器程式 ： 在控制器程式中，加入新的行為邏輯，例如根據感測器資料決定移動方向。 \n \n \n 設定事件觸發 ： 根據時間或感測器輸入，觸發不同的動作，例如避開障礙物或轉向。 \n \n \n 這樣可以使機器人具備更靈活的行為模式 \n 25.  Webots 支援哪些主流程控制語言？各有何優缺點？ \n Webots 支援多種程式語言作為控制器語言，包括： \n \n \n \n \n \n 語言 \n 優點 \n 缺點 \n \n \n \n \n C/C++ \n 效能高、API 完整、可與底層硬體/資料結構整合 \n 語法相對複雜，開發與除錯時間長 \n \n \n Python \n 語法簡單、開發快速、適合教學與原型開發 \n 效能較低，不適合需要即時反應的場景 \n \n \n Java \n 結構清晰、跨平台特性強 \n 使用較少，社群與資源較 Python 和 C/C++ 少 \n \n \n MATLAB \n 適合控制理論與數值模擬，便於與 Simulink 整合 \n 授權限制，效能受限，不支援所有 Webots 功能 \n \n \n ROS \n 可與 ROS 生態系整合、支援真實硬體與模擬結合 \n 設定與整合較複雜，學習曲線陡峭 \n \n \n \n \n \n \n 26.  機器人控制器程式如何與其他程式（如資料記錄、遠端伺服器）進行通訊？ \n 控制器與外部系統的通訊方式包括： \n \n \n Socket 通訊（TCP/UDP） ：常見用於與伺服器、資料庫交換資訊。 \n \n python \n \n \n \n \n \n import  socket s = socket.socket() s.connect(( \'host\' , port)) s.send( b\'data\' )  \n \n \n \n HTTP 請求 ：使用  requests  等函式庫與 RESTful API 通訊。 \n \n \n MQTT、ROS Topic ：若使用 ROS，透過發送 topic 或 service 調用與其他節點互動。 \n \n \n 檔案輸出 ：將資料寫入 CSV 或 TXT，再由其他程式讀取。 \n \n \n \n 27.  Webots 的模擬世界中燈光和陰影設定如何影響感測器或相機的數據？ \n 燈光和陰影會直接影響以下感測器輸出： \n \n \n 攝影機 ：亮度不足或光線反射會造成圖像模糊、過曝或黑影，降低影像辨識準確性。 \n \n \n 距離感測器（如紅外線） ：可能因陰影導致測量不準確。 \n \n \n 顏色感測器 ：在不同光照下，顏色感應可能偏差。 \n \n \n 🛠  解法 ： \n \n \n 增加環境光（ambient light）或指定光源方向。 \n \n \n 使用  Camera recognition  模式輔助，減少光影干擾。 \n \n \n \n 28.  如何在 Webots 中調整機器人或感測器的物理參數（如質量、摩擦係數）？ \n 可在世界檔（ .wbt ）或 PROTO 檔中設定以下參數： \n \n \n 質量 ： \n \n plaintext \n DEF MY_ROBOT Robot { ... physics Physics { mass 1.2 } }  \n \n \n \n 摩擦係數 ：  在  ContactProperties  中設置，例如： \n \n plaintext \n \n \n \n \n \n ContactProperties { coulombFriction 0.8 bounce 0.0 }  \n \n \n \n 彈性、阻尼等物理屬性 也可透過相應欄位設定。 \n \n \n \n 29.  請說明如何使用 Webots 的 Console 與 Debug 工具協助程式錯誤排除。 \n \n \n Console 輸出 ：可使用  print() （Python）或  printf() （C）觀察變數或執行流程。 \n \n \n Debug 模式 ： \n \n \n 在 Webots 中啟用「Pause」模式，逐步播放。 \n \n \n 檢查 Simulation > Console 視窗中是否出現錯誤訊息。 \n \n \n \n \n 控制器日誌（logs） ：自動儲存控制器執行錯誤，便於追蹤。 \n \n \n Supervisor 支援 ：可以在模擬中隨時重設物件狀態，有助除錯。 \n \n \n \n 30.  Tutorial1、2 裡的機器人遇到物體時，碰撞偵測機制如何運作？ \n Webots 透過以下方式進行碰撞偵測： \n \n \n 物理引擎（ODE）模擬真實碰撞 ：每個機器人部件皆有碰撞形狀（bounding box）。 \n \n \n 觸覺感測器（Touch Sensor） ：可選擇設置在物體或輪子上，用以偵測是否與其他物體接觸。 \n \n \n distanceSensor  雖非物理碰撞，但也可預測「接近狀態」。 \n \n \n 碰撞時會自動處理反作用力與位置變化，機器人可能會停下或彈回。 \n \n 31.  若要將 Webots 模擬結果導出並進行數據分析，你會選擇哪些方法與工具？ \n 導出與分析方式包括： \n \n \n 控制器寫檔輸出 ：將感測器數據寫入 CSV 檔案。 \n \n python \n \n \n \n \n \n with   open ( "data.csv" ,  "w" )  as  f: f.write( f" {sensor.getValue()} \\n")  \n \n \n \n Supervisor 寫入 JSON 或 YAML ：便於跨語言解析。 \n \n \n Webots Logging 功能 ：儲存模擬資料以供圖像、路徑分析。 \n \n \n 後處理工具 ： \n \n \n 使用  Python/pandas  進行資料分析。 \n \n \n 用  MATLAB  匯入 CSV 分析時間序列。 \n \n \n 可搭配  Jupyter Notebook  建立互動分析介面。 \n \n \n \n \n', 'tags': '', 'url': '24. 在 Tutorial1 或 Tutorial2 中，如何讓機器人執行預設外的自訂動作？.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n 四連桿圖檔 \n 有問題的四連桿wbt \n 不知道哪裡出問題link2會一直跑掉 \n \n 四連桿webot \n 將圖檔重新繪製後經過多次詢問chatgpt終於成功了 \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n \n 操作影片 \n \n 製作過程 \n \n 對於HW3的內容毫無頭緒只能看著老師給的範例檔案一步一步去看要怎麼連接每個joint跟零件，做出來後還是有點問題，最後沒有完整做出來只能拿老師給的範例去把零件改成自己的 \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度:week1,2都在建立個人及小組倉儲，修改舊python改成新版本 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 week3,4週完成task的任務，編寫程式 列出學員的作業倉儲與網頁連結, 以及各分組的倉儲及網站連結，找出未分組的學員名單 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 week5,6用 Brython 寫出在 id="brython_div1" 嵌入 html 連結的程式. 希望各連結能透過 http 協定連結到班上有 66 位學員的靜態網頁. 其中各學員的固定 IPv6 分別為 2001:288:6004:17:fff1:cd25:0000:b001 到 2001:288:6004:17:fff1:cd25:0000:b066, 且使用 port 8000 進行連結的Brython 程式。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 week7,8繪製四連桿機構的圖檔，開始建立webot場景，完成HW1的建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 week9，HW2利用自己繪製的 CAD 零件組成的平面四連桿機構 Webots 模擬場景，利用自己繪製的CAD建立場景遇到非常多狀況，在利用chatgpt不斷修改才完成HW2 \n 各週網頁內容: \n w1,2 \n \n w3,4 \n \n w5,6 \n \n \n w7,8 \n \n \n \n w9 \n \n \n 期中心得: \n 這次重修用了跟前年是不一樣的程式，在操作上有許多不熟悉的地方，多數都是靠詢問chatgpt解決大部分遇到的狀況，雖然沒有到很熟悉但還是有盡量跟上上課的進度 \n 期中自評影片: \n \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 \n EXAM1完整檔案 \n EXAM1線架構圖 \n \n 操作影片 \n \n 製作過程 \n \n 加入Robot 新增solid在children中新建shape 命名為base 在base建立1,0.1,0.1的shape \n 建立Hingejoint命名為joint1在endpoint建立soild \n children中建立pose \n 在pose中的children建立 0.4,0.1,0.1的shape joint1，調整axis(0,0,1),anchor(-0.5,0,0) 調整位置(-0.5,0,0)與角度(0,0,1,0.558)學號後兩碼為32 新增馬達命名為 motor 在joint1加入新的Hingejoint命名為joint2 \n 一樣新增soild後新增pose 建立0.6,0.1,0.1的shape 還要再建一個0.3,0.1,0.1的方塊 調整位置(0.4,0,0.1)與角度(0,0,1,0.66) joint2，調整axis(0,0,1),anchor(0.4,0,0) 在joint2加入新的Hingejoint命名為joint3 \n 新增soild後新增pose 建立 0.9,0.1,0.1的shape 調整位置(0.6,0,-0.1)與角度(0,0,-1,2.26) joint3，調整axis(0,0,1),anchor(0.6,0,0) 在link3_shape加入新的Hingejoint命名為joint4 新增SolidReference接到static environment joint4調整axis(0,0,1),anchor(0.9,0,0) joint1、2、3分別開啟bounding 以及physics 加入controller \n 在製作EXAM1的時候一樣出現link3無法固定的問題，在多次檢查過後發現是joint3的旋轉軸忘記改了，可能之前遇到的問題就是某個旋轉軸忘記改導致他鎖死或無法固定，如過在製作過程中沒仔細把每個步驟都做好事後檢查可能會很難找出問題，要一個一個慢慢看會看錯或是漏掉一些小地方。 \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n EXAM2檔案 \n EXAM2-線架構圖 \n \n 零件組合圖 \n \n 操作步驟: \n 加入Robot 新增兩個solid在children中新建Cadshape 命名為base1，base2 \n 建立兩個Hingejoint命名為joint1在endpoint建立soild \n children建立Cad shape joint1，調整axis(0,0,1) 新增馬達命名為 motor 在joint1加入新的Hingejoint命名為joint2 \n 一樣新增soild後 建立Cadshape joint2，調整axis(0,0,1),anchor(1.1194,0.6995,0) 在joint2加入新的Hingejoint命名為joint3 \n 新增soild後 建立Cad shape joint3，調整axis(0,0,1),anchor(2.656,1.9001,0) 新增Hingejoint命名為joint4 新增SolidReference接到link3 joint4調整axis(0,0,1),anchor(1.65,0,0) joint1、2、3分別開啟bounding 以及physics 加入controller \n \n 製作過程影片(重新畫的圖檔製作過程沒錄影所以放尺寸錯誤的影片) \n \n 在製作EXAM2時過程滿順利的但做完發現完全沒辦法動，然後我又重新做了好幾遍結果也都是一樣，後來發現可能是我的四連桿尺寸設計有問題導致他無法正常運作，再參考其他同學的尺寸後把整個圖重新繪製後也是順利做出來 \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n EXAM3-1 \n 在控制台設好自己的 IPv6 網址關掉 IPv4 網址以 \xa0webotsw --stream\xa0 啟動個人所完成的 \xa0HW1\xa0 模擬系統查看各自 webots 的端口在網頁上輸入 http:[ 自己的 IPv6 網址 ]: 查看各自 webots 的端口 /index.html 在 Connect to 內輸入 [ 自己的 IPv6 網址 ]:\xa0 查看各自 webots 的端口按下 Connect 即可看到自己 webots 的畫面按下 Disconnec 到 Connect to 內輸入 [ 組員的 IPv6 網址 ]:\xa0 組員 webots 的端口 \n \n 一開始在修改IPV6時改了錯的網路IP導致只能連上自己的畫面卻沒辦法連到別人的，發現問題後就很順利的看到組員的畫面了 \n EXAM3-2 \n 在控制台設好自己的 IPv6 網址 關掉 IPv4 網址\xa0 以 \xa0webotsw --stream\xa0 啟動 七段顯示器進行修改 模擬系統\xa0 查看各自 webots 的端口\xa0 在網頁上輸入 http:[ 自己的 IPv6 網址 ]: 查看各自 webots 的端口 /index.html\xa0 在 Connect to 內輸入 [ 自己的 IPv6 網址 ]:\xa0 查看各自 webots 的端口 按下 Connect 即可看到自己 webots 的畫面 按下 Disconnec 到 Connect to 內輸入 [ 組員的 IPv6 網址 ]:\xa0 組員 webots 的端口 \n \n 第二個大致跟第一相同只是變成修改七段顯示器秀出自己學號而已沒遇到什麼困難 \n EXAM3-3 \n 在控制台設好自己的 IPv6 網址 關掉 IPv4 網址\xa0 以 \xa0webotsw --stream \n 執行指令pip install websocket-client websocket-server keyboard \n 組長開啟youbot_cart_w10_websocket.7z場景 \n 組長把場景中的controller選 youbot_cart_server.py並把server_ip = "yout_ipv6_address改成server_ip = "::" \n 組員執行python youbot_cartclient.py並把IP設定成組長的IP \n 在網頁上輸入 http:[自己 的 IPv6 網址 ]: 查看各自 webots 的端口 /index.html\xa0 在 Connect to 內輸入 [組長 的 IPv6 網址 ]:\xa0 查看各自 webots 的端口 按下 Connect 即可看到組長 webots畫面 \n 按下上下左右即可操作機器人 \n \n 對於要怎麼利用 websocket連線操作一開始完全沒頭緒在看其他同學的操作步驟後順利連線上了 \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Final process', 'text': '06/13： \n 修改feed_ball_loop.py參數餵球上限： \n from controller \n# ----------------- 參數區 -----------------\nHOOP_CENTER = [0.622, -0.103, 0.742838]\nBALL_DEF_PATTERN = re.compile(r"Sphere_\\d+")\nsupervisor = Supervisor()\ntimestep = int(supervisor.getBasicTimeStep())\nkeyboard = Keyboard()\nkeyboard.enable(timestep)\nMAX_BALLS_ALLOWED = 3\nball_count = 0\nwarning_shown = False\nlanded_balls = []  # [(def_name, landed_time)]\nDELETE_DELAY = 2.0  # 秒\n# ----------------- 建立靜態球體 -----------------\ndef create_static_sphere(supervisor, x, y, z):\n    global waiting_ball_def, waiting_ball_info, ball_count, warning_shown\n    if ball_count >= MAX_BALLS_ALLOWED:\n        if not warning_shown:\n            print(f"球數已達上限 ({MAX_BALLS_ALLOWED})，請謹慎地擊出最後一球。")\n            warning_shown = True\n        return\n\n    warning_shown = False  # 可以新增球，代表之前的提示已失效\n    def_name = generate_valid_def_name()\n    waiting_ball_def = def_name\n    r, g, b = generate_random_color()\n    world_pos = youbot_local_to_world((x, y, z))\n    waiting_ball_info = (world_pos, r, g, b)\n    create_static_ball(def_name, world_pos, r, g, b)\n    ball_count += 1\n# ----------------- 定義球落地 -----------------\ndef is_ball_landed(pos, threshold_z=0.13):\n    return pos[2] < threshold_z\n\nprint("按 A 產生一顆靜止球，按 M 讓球變 dynamic 可擊出（自動與手動均可，多5個軌跡點，球落地後軌跡自動消失）")\n\nwhile supervisor.step(timestep) != -1:\n    # 1. 處理 auto_loop.py 傳來的自動訊息\n    while receiver.getQueueLength() > 0:\n        msg = receiver.getString()\n        if msg == "a":\n            if waiting_ball_def is None:\n                create_static_sphere(supervisor, *default_feed_pos)\n                current_tracked_def = waiting_ball_def\n                delete_trajectory_points()\n        elif msg == "m":\n            activate_dynamic_ball()\n        # "k" 可選，通常給擊球機構用，這邊可忽略或加狀態清理\n        receiver.nextPacket()\n\n    # 2. 處理手動鍵盤控制\n    key = keyboard.getKey()\n    current_time = time.time()\n    if key == ord(\'A\') and (current_time - last_key_time >= debounce_time):\n        if waiting_ball_def is None:\n            create_static_sphere(supervisor, *default_feed_pos)\n            current_tracked_def = waiting_ball_def\n            delete_trajectory_points()\n        else:\n            print("還有一顆球等待擊出，請先擊出再產生新球。")\n        last_key_time = current_time\n    if key == ord(\'M\') and (current_time - last_key_time >= debounce_time):\n        activate_dynamic_ball()\n        last_key_time = current_time\n\n    # 3. 拋物線軌跡追蹤\n    if current_tracked_def is not None:\n        ball_node = supervisor.getFromDef(current_tracked_def)\n        if ball_node is not None:\n            pos = ball_node.getPosition()\n            if current_time - last_print_time >= PRINT_INTERVAL:\n                last_print_time = current_time\n            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) > TRAJECTORY_POINT_STEP:\n                def_name = create_trajectory_point(pos)\n                trajectory_points.append((pos, def_name))\n                if len(trajectory_points) > TRAJECTORY_MAX_POINTS:\n                    _, old_def = trajectory_points.pop(0)\n                    node = supervisor.getFromDef(old_def)\n                    if node:\n                        node.remove()\n            if is_ball_landed(pos):\n                delete_trajectory_points()\n                landed_balls.append((current_tracked_def, time.time()))\n                current_tracked_def = None\n                ball_count = max(0, ball_count - 1)\n\n\n\n        else:\n            delete_trajectory_points()\n            current_tracked_def = None\n# ----------------- 處理落地球延遲刪除 -----------------            \n    now = time.time()\n    for def_name, landed_time in landed_balls[:]:\n        if now - landed_time >= DELETE_DELAY:\n            node = supervisor.getFromDef(def_name)\n            if node:\n                node.remove()\n            landed_balls.remove((def_name, landed_time)) \n Q：目前模擬結果無法刪除球sphere實體。 \n 檔案： 2b-g9final.7z \n 6/14 \n 針對6/13的問題解方法 : 在外觀中把實體隱藏即可，這樣不會影響到需要用到的senser \n appearance Appearance {\n  material Material {\n    transparency 1\n  }\n} \n 啟動時發現的問題: \n \n 若啟動後出現 cd2025_final_project_w17\\controllers\\feed_ball_loop\\feed_ball_loop.py", line 4, in <module>\xa0 ，需先在cmd中輸入\xa0 pip --version\xa0 python --version 檢查有沒有安裝numpy ，如果沒有須輸入\xa0 pip install numpy 。 \n \n 2b-g9final-1.zip \n 6/16 \n 將cd2025_final_project_w17中的fourbar_controller跟stand_controller參考youbot_cart_w10_websocket中的youbot_cart_server.py修改能利用websocket連線的版本 \n 並參考youbot_cart_client.py做出控制程式。 \n fourbar_controller_server \n stand_controller_server \n fourbar_controller_client \n stand_controller_client \n \n ppt : 協同產品設計期末專案 \n pdf: 協同產品設計期末報告 \n 期末連線控制影片: \n \n 最終成果畫面: \n \n \n', 'tags': '', 'url': 'Final process.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};