<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-YUN4/content/index.html">https://mdecd2025.github.io/hw-YUN4/content/index.html</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-YUN4">https://github.com/mdecd2025/hw-YUN4</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Task</h1>
<h2>Task1</h2>
<p>將舊python改成新版本的操作影片</p>
<p><a href="/downloads/start.bat - SciTE 2025-02-25 10-22-09.mp4" title="影片1">影片1</a></p>
<p><a href="/downloads/選取 C__Windows_System32_cmd.exe 2025-02-25 10-28-05.mp4">影片2</a></p>
<h3>list</h3>
<p><button id="add1to100">list</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/YUN4/2fee8a713fe8901b0b420dd09bda576e/raw/e8500bbfa758900c9ebb42970de41370c6b39431/list1"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/YUN4/2fee8a713fe8901b0b420dd09bda576e/raw/e8500bbfa758900c9ebb42970de41370c6b39431/list1"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h2>task2</h2>
<p><button id="add1to100">list</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/YUN4/ca15651a264599342c7365d522e314cc/raw/c8002ea8f27aee822e68bbe511cdef6c303e2078/1"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/YUN4/ca15651a264599342c7365d522e314cc/raw/c8002ea8f27aee822e68bbe511cdef6c303e2078/1"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h2>task2-2</h2>
<p><button id="add1to100">list</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/YUN4/e7a553c270f469d5a7394740a627c8a9/raw/b9f22443f1a1fab82c45299595eaac5a5c44a797/2"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/YUN4/e7a553c270f469d5a7394740a627c8a9/raw/b9f22443f1a1fab82c45299595eaac5a5c44a797/2"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>task2-3</h2>
<p><button id="add1to100">list</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/YUN4/27ee03f8f0ab6821daef1776031a0158/raw/81ca0d29763fd8a697419997ca58a532ccd8b5ba/3"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/YUN4/27ee03f8f0ab6821daef1776031a0158/raw/81ca0d29763fd8a697419997ca58a532ccd8b5ba/3"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h2>task3</h2>
<p><a href="/downloads/fourbarslvs.7z">四連桿slvs</a></p>
<h2>task5</h2>
<p>webot是什麼?</p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p class="" data-end="347" data-start="114"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 是一款專業的開源 3D 機器人模擬軟體，廣泛應用於工業、教育與研究領域。</span> <span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">它提供了一個完整的開發環境，用於建模、程式設計與模擬機器人。</span> <span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">用戶可以創建具有質量、關節、摩擦係數等物理屬性的 3D 虛擬世界，並在其中添加被動或主動物體，如輪式、腿式或飛行機器人。</span> <span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這些機器人可以配備各種感測器與致動器，如距離感測器、驅動輪、相機、馬達、觸碰感測器、發射器、接收器等，並可獨立編程以實現所需行為。</span></p>
<hr class="" data-end="352" data-start="349"/>
<p class="" data-end="455" data-start="374">webot的應用範圍</p>
<p class="" data-end="455" data-start="374"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 適用於以下領域：</span></p>
<ul data-end="794" data-start="457">
<li class="" data-end="498" data-start="457">
<p class="" data-end="498" data-start="459"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">機器人原型開發（學術研究、汽車工業、航空、吸塵器產業、玩具產業、愛好者等）</span></p>
</li>
<li class="" data-end="540" data-start="499">
<p class="" data-end="540" data-start="501"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">機器人運動學研究（四足、仿人、四輪機器人等）</span></p>
</li>
<li class="" data-end="582" data-start="541">
<p class="" data-end="582" data-start="543"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">多智能體研究（群體智慧、協作機器人群體等）</span></p>
</li>
<li class="" data-end="624" data-start="583">
<p class="" data-end="624" data-start="585"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">自適應行為研究（遺傳演算法、神經網路、人工智慧等）</span></p>
</li>
<li class="" data-end="666" data-start="625">
<p class="" data-end="666" data-start="627"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">機器人教學（機器人學課程、C/C++/Java/Python 程式設計課程等）</span></p>
</li>
<li class="" data-end="794" data-start="667">
<p class="" data-end="794" data-start="669"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">機器人競賽（如 Robotstadium 或 Rat's Life）</span></p>
</li>
</ul>
<hr class="" data-end="799" data-start="796"/>
<p class="" data-end="905" data-start="820">webot的組成</p>
<p class="" data-end="905" data-start="820"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 模擬由以下部分組成：</span></p>
<ol data-end="1179" data-start="907">
<li class="" data-end="971" data-start="907">
<p class="" data-end="971" data-start="910"><strong data-end="924" data-start="910">世界檔案（.wbt）</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">定義機器人及其環境的 3D 描述，包含物體的位置信息、幾何形狀、外觀、物理屬性等。</span></p>
</li>
<li class="" data-end="1031" data-start="972">
<p class="" data-end="1031" data-start="975"><strong data-end="984" data-start="975">控制器程式</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">用於控制機器人的程式，可使用 C、C++、Java、Python 或 MATLAB 編寫。</span></p>
</li>
<li class="" data-end="1179" data-start="1032">
<p class="" data-end="1179" data-start="1035"><strong data-end="1046" data-start="1035">可選的物理插件</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">用於修改 Webots 常規物理行為的插件（C/C++ 編寫）。</span></p>
</li>
</ol>
<div class="group pointer-events-none relative flex justify-center *:pointer-events-auto">
<div class="tableContainer horzScrollShadows relative">
<p>重要英文單字與用法範例</p>
<table class="min-w-full" data-end="2146" data-start="1205" style="width: 567.484px;">
<thead data-end="1227" data-start="1205">
<tr data-end="1227" data-start="1205">
<th data-end="1212" data-start="1205" style="width: 78px;">英文單字</th>
<th data-end="1219" data-start="1212" style="width: 90px;">中文解釋</th>
<th data-end="1227" data-start="1219" style="width: 375.484px;">用法範例</th>
</tr>
</thead>
<tbody data-end="2146" data-start="1262">
<tr data-end="1359" data-start="1262">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1279" data-start="1262" style="width: 78px;"><strong data-end="1278" data-start="1264">Simulation</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1284" data-start="1279" style="width: 90px;">模擬</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1359" data-start="1284" style="width: 375.484px;">"Webots allows users to create 3D virtual worlds for robot simulation."</td>
</tr>
<tr data-end="1463" data-start="1360">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1377" data-start="1360" style="width: 78px;"><strong data-end="1376" data-start="1362">Controller</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1383" data-start="1377" style="width: 90px;">控制器</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1463" data-start="1383" style="width: 375.484px;">"Each robot in Webots requires a controller program to define its behavior."</td>
</tr>
<tr data-end="1555" data-start="1464">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1477" data-start="1464" style="width: 78px;"><strong data-end="1476" data-start="1466">Sensor</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1483" data-start="1477" style="width: 90px;">感測器</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1555" data-start="1483" style="width: 375.484px;">"Webots supports various sensors like cameras and distance sensors."</td>
</tr>
<tr data-end="1633" data-start="1556">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1571" data-start="1556" style="width: 78px;"><strong data-end="1570" data-start="1558">Actuator</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1577" data-start="1571" style="width: 90px;">致動器</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1633" data-start="1577" style="width: 375.484px;">"Actuators in Webots can include motors and wheels."</td>
</tr>
<tr data-end="1730" data-start="1634">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1650" data-start="1634" style="width: 78px;"><strong data-end="1649" data-start="1636">Prototype</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1655" data-start="1650" style="width: 90px;">原型</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1730" data-start="1655" style="width: 375.484px;">"Webots is widely used for robot prototyping in academia and industry."</td>
</tr>
<tr data-end="1818" data-start="1731">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1749" data-start="1731" style="width: 78px;"><strong data-end="1748" data-start="1733">Environment</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1754" data-start="1749" style="width: 90px;">環境</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1818" data-start="1754" style="width: 375.484px;">"Users can design indoor or outdoor environments in Webots."</td>
</tr>
<tr data-end="1907" data-start="1819">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1835" data-start="1819" style="width: 78px;"><strong data-end="1834" data-start="1821">Interface</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1840" data-start="1835" style="width: 90px;">介面</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1907" data-start="1840" style="width: 375.484px;">"Webots provides interfaces to real mobile robots for testing."</td>
</tr>
<tr data-end="1989" data-start="1908">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1921" data-start="1908" style="width: 78px;"><strong data-end="1920" data-start="1910">VRML97</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="1936" data-start="1921" style="width: 90px;">一種 3D 圖形描述語言</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/3)]" data-end="1989" data-start="1936" style="width: 375.484px;">"Worlds in Webots can be described using VRML97."</td>
</tr>
<tr data-end="2146" data-start="1990">
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="2007" data-start="1990" style="width: 78px;"><strong data-end="2006" data-start="1992">Supervisor</strong></td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)]" data-end="2013" data-start="2007" style="width: 90px;">監控器</td>
<td class="max-w-[calc(var(--thread-content-max-width)*2/3)] min-w-[calc(var(--thread-content-max-width)/2)]" data-end="2099" data-start="2013" style="width: 375.484px;">"The Supervisor controller can perform operations not possible for regular robots."</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><strong data-end="2244" data-start="2172">英文文法逐句解析</strong></p>
<ol data-end="3008" data-start="2169">
<li class="" data-end="2410" data-start="2169">
<p class="" data-end="2244" data-start="2172"><strong data-end="2244" data-start="2172">"Webots is a professional mobile robot simulation software package."</strong></p>
<p class="" data-end="2305" data-start="2250"><strong data-end="2258" data-start="2250">文法結構</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">主詞 + be 動詞 + 名詞片語。</span></p>
</li>
<li class="" data-end="2410" data-start="2169">
<p class="" data-end="2244" data-start="2172"><strong data-end="2244" data-start="2172"></strong></p>
<ul data-end="2410" data-start="2248">
<li class="" data-end="2410" data-start="2309">
<p class="" data-end="2410" data-start="2311"><strong data-end="2317" data-start="2311">解析</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">此句為簡單的陳述句，介紹 Webots 是一款專業的移動機器人模擬軟體。</span></p>
</li>
</ul>
</li>
<li class="" data-end="2752" data-start="2412">
<p class="" data-end="2586" data-start="2415"><strong data-end="2586" data-start="2415">"It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc."</strong></p>
<ul data-end="2752" data-start="2590">
<li class="" data-end="2647" data-start="2590">
<p class="" data-end="2647" data-start="2592"><strong data-end="2600" data-start="2592">文法結構</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">主詞 + 動詞 + 名詞片語，後接關係子句。</span></p>
</li>
<li class="" data-end="2752" data-start="2651">
<p class="" data-end="2752" data-start="2653"><strong data-end="2659" data-start="2653">解析</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">此句描述 Webots 提供快速原型開發環境，並進一步說明該環境的功能。</span><strong data-end="2842" data-start="2757">"The user can add simple passive objects or active objects called mobile robots."</strong></p>
</li>
</ul>
</li>
<li class="" data-end="3008" data-start="2754">
<ul data-end="3008" data-start="2846">
<li class="" data-end="2903" data-start="2846">
<p class="" data-end="2903" data-start="2848"><strong data-end="2856" data-start="2848">文法結構</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">主詞 + modal 動詞 + 動詞原形 + 名詞片語。</span></p>
</li>
<li class="" data-end="3008" data-start="2907">
<p class="" data-end="3008" data-start="2909"><strong data-end="2915" data-start="2909">解析</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">此句說明用戶可以添加簡單的被動物體或稱為移動機器人的主動物體。</span></p>
</li>
</ul>
</li>
</ol>
<p><strong data-end="3057" data-start="3044">手動建立webot場景的步驟</strong></p>
<p><strong data-end="3057" data-start="3044">目標場景範例： 建立一個簡單的地面環境，場景中包含： 一個平坦地板 一個機器人（預設為 e-puck） 一個障礙物（例如立方體） 一個基本的控制器（空的 Python 程式） 🛠 建立步驟詳解（GUI 操作流程） </strong></p>
<p><strong data-end="3057" data-start="3044"> 1. 啟動 Webots 並建立新世界 開啟 Webots。 點選上方選單 File &gt; New World（檔案 &gt; 新建世界）。 新建世界會出現一個空白的地板（通常已包含 WorldInfo, Viewpoint, TexturedBackground, TexturedSkybox 等預設元件）。 </strong></p>
<p><strong data-end="3057" data-start="3044">2. 新增一個平坦地面 在 Scene Tree（場景樹） 視窗中，右鍵點選 root → 選擇 Add &gt; Floor。 點選剛剛新增的 Floor 節點，在右側「Field」視窗中可設定： size：如 [5, 5] 表示寬 5m、長 5m。 appearance：可以改成 PBRAppearance 改變材質。 注意： 不要放置太小的地板，機器人容易掉出模擬範圍。  </strong></p>
<p><strong data-end="3057" data-start="3044">3. 加入機器人（以 e-puck 為例） 在 root 節點上再次右鍵 → Add &gt; Robot。 在彈出的模型清單中選擇 e-puck。 點選該機器人節點，在 controller 欄位輸入控制器名稱，例如：my_controller（稍後會自動產生此程式）。  注意： 若控制器名稱未填寫，機器人不會執行任何程式。 一個機器人只能有一個控制器。  </strong></p>
<p><strong data-end="3057" data-start="3044">4. 加入障礙物（例如方塊） 在 root 上右鍵 → Add &gt; Solid。 點選新增的 Solid 節點，並命名為 Obstacle。 在 boundingObject 中加入一個立方體碰撞體： 點選 boundingObject → Add &gt; Box。 設定大小為 [0.2, 0.2, 0.2]（20cm 正立方體）。 在 children 欄位中 → Add &gt; Shape &gt; Appearance &gt; PBRAppearance 改變顏色或材質。  </strong></p>
<p><strong data-end="3057" data-start="3044">5. 建立控制器程式 儲存你的世界（File &gt; Save World As...）。 點選上方 Wizards &gt; New Robot Controller。 選擇你先前輸入的控制器名稱（例如 my_controller）。 語言選擇 Python。 系統會幫你建立一個初始的 Python 控制器，包含迴圈與基本 API。  </strong></p>
<p><strong data-end="3057" data-start="3044">6. 執行模擬 點選工具列中的「播放」按鈕 開始模擬。 可在底下控制台觀察輸出訊息。 若控制器為空，可以加入簡單的移動程式碼</strong></p>
<p><strong data-end="3057" data-start="3044">建立場景時的注意事項 注意點<span> </span>說明 地板大小<span> </span>太小的地板會讓機器人掉落出模擬範圍 控制器名稱<span> </span>必須與建立的程式名稱一致，否則無法執行 Robot 模型位置<span> </span>放置時機器人若重疊其他物體會出錯，可稍微抬高 translation.z Solid 必須有碰撞體<span> </span>boundingObject 未設定會導致無法互動或穿透</strong></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p><a href="/downloads/w7.7z">hw1 world檔</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/QhiZ2vmTW2o?si=Ni2IEtxlnx6ihAUC" title="YouTube video player" width="560"></iframe></p>
<p>操作影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6-4P-TpWLR4?si=PpTvSk04DUBf-Eb_" title="YouTube video player" width="560"></iframe></p>
<h3>Tutorial1</h3>
<p>在製作 HW1 之前是否實際練習 Tutorial1 與 Tutorial2?</p>
<p>data-end="337" data-start="148"&gt;<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">是的，建議在進行 HW1 之前，先完成 Webots 的 Tutorial1 和 Tutorial2。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這些教程提供了基本的操作和編程知識，有助於熟悉 Webots 的使用。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">例如，Tutorial1 介紹了如何建立並執行一個新的模擬世界，以及如何控制機器人移動。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Tutorial2 則進一步探討了感測器的使用和避障策略。</span></p>
<p data-end="337" data-start="148">2.Webots 是什麼樣的軟體？它主要用途為何？</p>
<p data-end="572" data-start="376"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 是一款免費且開源的 3D 機器人模擬器，廣泛應用於學術研究、教育和工業領域。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">它支援多種機器人模型、感測器和致動器，並允許使用者編寫控制器來模擬機器人的行為。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 支援多種程式語言，包括 C、C++、Python、Java、MATLAB 和 ROS。</span><span class="" data-state="closed"></span></p>
<hr data-end="577" data-start="574"/><h3>3. 在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？</h3>
<p data-end="740" data-start="623"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Tutorial1 中，學習者通常會使用名為 "e-puck" 的機器人模型。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這是一款小型的差速驅動機器人，適合用於學習基本的控制和感測器操作。</span></p>
<hr data-end="745" data-start="742"/>
<h3>4. 如何在 Webots 中建立並執行一個新的模擬世界（world）？</h3>
<p data-end="867" data-start="789"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中建立並執行新的模擬世界的步驟如下：</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://tinymal.cn/72e2/6683?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://tinymal.cn/72e2/6683?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">tinymal.cn</span></span></span></a></span></span></p>
<ol data-end="1122" data-start="869">
<li data-end="911" data-start="869">
<p data-end="911" data-start="872"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">打開 Webots，選擇 "File" &gt; "New World"。</span></p>
</li>
<li data-end="954" data-start="912">
<p data-end="954" data-start="915"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在彈出的對話框中，選擇一個模板或從頭開始建立。</span></p>
</li>
<li data-end="997" data-start="955">
<p data-end="997" data-start="958"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在世界中添加所需的物件，如地面、障礙物和機器人。</span></p>
</li>
<li data-end="1040" data-start="998">
<p data-end="1040" data-start="1001"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">為機器人指定控制器。</span></p>
</li>
<li data-end="1122" data-start="1041">
<p data-end="1122" data-start="1044"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">點擊 "Play" 按鈕開始模擬。</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://iter01.com/174809.html?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://iter01.com/174809.html?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">iter01.com</span></span></span></a></span></span></p>
</li>
</ol>
<hr data-end="1127" data-start="1124"/>
<h3>5. 請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。</h3>
<p data-end="1284" data-start="1167"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">要讓機器人在模擬中移動，需要控制其馬達。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">以下是使用 Python 語言控制 e-puck 機器人移動的範例程式碼：</span></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span><span class="hljs-keyword">from</span></span><span> controller </span><span><span class="hljs-keyword">import</span></span><span> Robot TIME_STEP = </span><span><span class="hljs-number">32</span></span><span> robot = Robot() left_motor = robot.getDevice(</span><span><span class="hljs-string">"left wheel motor"</span></span><span>) right_motor = robot.getDevice(</span><span><span class="hljs-string">"right wheel motor"</span></span><span>) left_motor.setPosition(</span><span><span class="hljs-built_in">float</span></span><span>(</span><span><span class="hljs-string">'inf'</span></span><span>)) right_motor.setPosition(</span><span><span class="hljs-built_in">float</span></span><span>(</span><span><span class="hljs-string">'inf'</span></span><span>)) left_motor.setVelocity(</span><span><span class="hljs-number">1.0</span></span><span>) right_motor.setVelocity(</span><span><span class="hljs-number">1.0</span></span><span>) </span><span><span class="hljs-keyword">while</span></span><span> robot.step(TIME_STEP) != -</span><span><span class="hljs-number">1</span></span><span>: </span><span><span class="hljs-keyword">pass</span></span><span> </span></span></code></div>
</div>
<p data-end="1678" data-start="1639"></p>
<p data-end="1758" data-start="1680"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這段程式碼使機器人以固定速度前進。</span></p>
<hr data-end="1763" data-start="1760"/>
<h3>6. Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？</h3>
<p data-end="1927" data-start="1810"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Tutorial1 中，學習者需要編輯控制器程式碼，通常是 Python 或 C 語言檔案。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">透過修改控制器中的參數，如馬達速度、感測器閾值等，來控制機器人的行為。</span></p>
<hr data-end="1932" data-start="1929"/>
<h3>7. 請簡述 Webots 控制器（controller）的功能及其與機器人的關係。</h3>
<p data-end="2138" data-start="1982"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 控制器是用來控制機器人行為的程式。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">它通過讀取感測器數據並根據這些數據調整馬達輸出，來實現機器人的各種行為。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">控制器與機器人之間的關係是，控制器作為機器人的大腦，負責決策和行動。</span></p>
<hr data-end="2143" data-start="2140"/>
<h3>8. 在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？</h3>
<p data-end="2302" data-start="2185"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Tutorial2 中，機器人需要使用感測器（如距離感測器）來避開障礙物。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這通常涉及讀取感測器數據，並根據這些數據調整機器人的運動策略。</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://iter01.com/174809.html?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://iter01.com/174809.html?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">iter01.com</span></span></span></a></span></span></p>
<hr data-end="2307" data-start="2304"/>
<h3>9. Webots 中的 "Supervisor" 是什麼？它與一般機器人控制器有何不同？</h3>
<p data-end="2477" data-start="2360"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">"Supervisor" 是一種特殊的控制器，具有更高的權限，能夠控制模擬世界中的所有元素。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">與一般控制器只能控制指定機器人不同，Supervisor 可以讀取和修改世界中的節點、感測器和其他物件的屬性。</span></p>
<hr data-end="2482" data-start="2479"/>
<h3>10. 請說明如何在 Webots 中進行感測器數據的讀取與應用（例如距離感測器、攝影機）。</h3>
<p data-end="2616" data-start="2536"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中，感測器數據的讀取通常包括以下步驟：</span></p>
<ol data-end="2780" data-start="2618">
<li data-end="2780" data-start="2618">
<p data-end="2703" data-start="2621"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">獲取感測器裝置：</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://iter01.com/174809.html?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://iter01.com/174809.html?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">iter01.com</span></span></span></a></span></span></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span>distance_sensor = robot.getDevice(</span><span><span class="hljs-string">"distance_sensor"</span></span><span>) </span></span></code></div>
</div>
</li>
</ol>
<p data-end="2822" data-start="2781"></p>
<ol data-end="2967" data-start="2824" start="2">
<li data-end="2967" data-start="2824">
<p data-end="2909" data-start="2827"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">使能感測器：</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://iter01.com/174809.html?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://iter01.com/174809.html?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between"><span class="max-w-full grow truncate overflow-hidden text-center">iter01.com</span><span class="-me-1 flex h-full items-center rounded-full px-1 text-[#8F8F8F]">+1</span></span><span class="flex h-4 w-full items-center justify-between absolute"><span class="max-w-full grow truncate overflow-hidden text-center">blog.csdn.net</span><span class="-me-1 flex h-full items-center rounded-full px-1 text-[#8F8F8F]">+1</span></span></span></a></span></span></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span>distance_sensor.enable(TIME_STEP) </span></span></code></div>
</div>
</li>
</ol>
<p data-end="3009" data-start="2968"></p>
<ol data-end="3155" data-start="3011" start="3">
<li data-end="3155" data-start="3011">
<p data-end="3096" data-start="3014"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">讀取數據：</span></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span>value = distance_sensor.getValue() </span></span></code></div>
</div>
</li>
</ol>
<p data-end="3197" data-start="3156"></p>
<ol data-end="3284" data-start="3199" start="4">
<li data-end="3284" data-start="3199">
<p data-end="3284" data-start="3202"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">根據讀取的數據進行應用，如避障。</span></p>
</li>
</ol>
<hr data-end="3289" data-start="3286"/>
<h3>11. 若要延伸 Tutorial2 讓機器人具備自主避障能力，你會怎麼設計與實作？</h3>
<p data-end="3421" data-start="3339"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">要讓機器人具備自主避障能力，可以採用以下策略：</span></p>
<ol data-end="3598" data-start="3423">
<li data-end="3467" data-start="3423">
<p data-end="3467" data-start="3426"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">使用多個距離感測器來檢測周圍的障礙物。</span></p>
</li>
<li data-end="3512" data-start="3468">
<p data-end="3512" data-start="3471"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">根據感測器數據決定機器人的行進方向。</span></p>
</li>
<li data-end="3598" data-start="3513">
<p data-end="3598" data-start="3516"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">如果前方有障礙物，則改變方向或停止前進。</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://iter01.com/174809.html?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://iter01.com/174809.html?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">iter01.com</span></span></span></a></span></span></p>
</li>
</ol>
<p data-end="3682" data-start="3600"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">以下是使用 Python 語言實現簡單避障的範例程式碼：</span></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span><span class="hljs-keyword">from</span></span><span> controller </span><span><span class="hljs-keyword">import</span></span><span> Robot TIME_STEP = </span><span><span class="hljs-number">32</span></span><span> robot = Robot() left_motor = robot.getDevice(</span><span><span class="hljs-string">"left wheel motor"</span></span><span>) right_motor = robot.getDevice(</span><span><span class="hljs-string">"right wheel motor"</span></span><span>) left_motor.setPosition(</span><span><span class="hljs-built_in">float</span></span><span>(</span><span><span class="hljs-string">'inf'</span></span><span>)) right_motor.setPosition(</span><span><span class="hljs-built_in">float</span></span><span>(</span><span><span class="hljs-string">'inf'</span></span><span>)) left_motor.setVelocity(</span><span><span class="hljs-number">1.0</span></span><span>) right_motor.setVelocity(</span><span><span class="hljs-number">1.0</span></span><span>) distance_sensor = robot.getDevice(</span><span><span class="hljs-string">"distance_sensor"</span></span><span>) distance_sensor.enable(TIME_STEP) </span><span><span class="hljs-keyword">while</span></span><span> robot.step(TIME_STEP) != -</span><span><span class="hljs-number">1</span></span><span>: </span><span><span class="hljs-keyword">if</span></span><span> distance_sensor.getValue() &lt; </span><span><span class="hljs-number">1000</span></span><span>: left_motor.setVelocity(-</span><span><span class="hljs-number">1.0</span></span><span>) right_motor.setVelocity(-</span><span><span class="hljs-number">1.0</span></span><span>) </span><span><span class="hljs-keyword">else</span></span><span>: left_motor.setVelocity(</span><span><span class="hljs-number">1.0</span></span><span>) right_motor.setVelocity(</span><span><span class="hljs-number">1.0</span></span><span>) </span></span></code></div>
</div>
<p data-end="4357" data-start="4316"></p>
<hr data-end="4362" data-start="4359"/>
<h3>12. 請說明 Webots 中「時間步長（timestep）」的意義，以及它對模擬的影響。</h3>
<p data-end="4621" data-start="4416"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">"時間步長" 是模擬中每次更新的時間間隔。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">它影響模擬的精確度和效能。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">較短的時間步長可以提高模擬的精確度，但可能會降低效能；較長的時間步長則相反。</span><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中，時間步長通常設定為 32 毫秒。</span></p>
<hr data-end="4626" data-start="4623"/>
<h3>13. 如何在 Webots 中為機器人新增感測器？請說明基本步驟。</h3>
<p data-end="4750" data-start="4668"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中為機器人新增感測器的步驟如下：</span></p>
<ol data-end="4972" data-start="4752">
<li data-end="4796" data-start="4752">
<p data-end="4796" data-start="4755"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">打開機器人模型的 <code data-end="15" data-start="9">.wbt</code> 檔案。</span></p>
</li>
<li data-end="4841" data-start="4797">
<p data-end="4841" data-start="4800"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 <code data-end="11" data-start="2">&lt;robot&gt;</code> 標籤內，新增感測器節點，如 <code data-end="44" data-start="26">&lt;distanceSensor&gt;</code>。</span></p>
</li>
<li data-end="4886" data-start="4842">
<p data-end="4886" data-start="4845"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">為感測器指定名稱、位置和方向。</span></p>
</li>
<li data-end="4972" data-start="4887">
<p data-end="4972" data-start="4890"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在控制器程式中，使用 <code data-end="22" data-start="11">getDevice</code> 方法獲取感測器裝置，並使能它。</span></p>
</li>
</ol>
<h3>14. 如何將 Webots 控制器程式從 Python 改為 C 語言，並指出相關設定？</h3>
<p data-end="158" data-start="84"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">要將控制器程式從 Python 轉換為 C 語言，需進行以下步驟：</span></p>
<ul data-end="348" data-start="160">
<li data-end="251" data-start="160">
<p data-end="251" data-start="162"><strong data-end="176" data-start="162">建立 C 控制器檔案</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 專案的 <code data-end="26" data-start="13">controllers</code> 資料夾中，建立一個新的資料夾，並在其中創建一個 <code data-end="55" data-start="51">.c</code> 檔案。</span></p>
</li>
<li data-end="344" data-start="253">
<p data-end="344" data-start="255"><strong data-end="267" data-start="255">撰寫 C 程式碼</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">使用 Webots 的 C API 撰寫控制器程式碼，例如：</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://github.com/cyberbotics/webots-doc/blob/master/guide/controller-programming.md?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://github.com/cyberbotics/webots-doc/blob/master/guide/controller-programming.md?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">github.com</span></span></span></a></span></span></p>
</li>
</ul>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">c</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-c"><span><span> </span><span><span class="hljs-meta">#<span class="hljs-keyword">include</span></span></span><span> </span><span><span class="hljs-string">&lt;webots/robot.h&gt;</span></span><span> </span><span><span class="hljs-meta">#<span class="hljs-keyword">include</span></span></span><span> </span><span><span class="hljs-string">&lt;stdio.h&gt;</span></span><span> </span><span><span class="hljs-type">int</span></span><span> </span><span><span class="hljs-title function_">main</span></span><span><span class="hljs-params">()</span></span><span> { wb_robot_init(); </span><span><span class="hljs-keyword">while</span></span><span> (wb_robot_step(</span><span><span class="hljs-number">32</span></span><span>) != </span><span><span class="hljs-number">-1</span></span><span>) </span><span><span class="hljs-built_in">printf</span></span><span>(</span><span><span class="hljs-string">"Hello World!\n"</span></span><span>); wb_robot_cleanup(); </span><span><span class="hljs-keyword">return</span></span><span> </span><span><span class="hljs-number">0</span></span><span>; } </span></span></code></div>
</div>
<p data-end="603" data-start="564"></p>
<ul data-end="787" data-start="605">
<li data-end="695" data-start="605">
<p data-end="695" data-start="607"><strong data-end="616" data-start="607">編譯控制器</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">根據作業系統的不同，使用相應的編譯器（如 GCC）來編譯 C 程式碼。</span></p>
</li>
<li data-end="787" data-start="697">
<p data-end="787" data-start="699"><strong data-end="708" data-start="699">設定控制器</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 的世界檔案（<code data-end="21" data-start="15">.wbt</code>）中，指定機器人使用剛才編譯的 C 控制器。</span></p>
</li>
</ul>
<hr data-end="792" data-start="789"/>
<h3>15. Tutorial1、2 中，若控制器程式有語法錯誤時，Webots 會如何反應？學員該如何排除？</h3>
<p data-end="929" data-start="851"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">當控制器程式有語法錯誤時，Webots 會在啟動模擬時顯示錯誤訊息，並停止該控制器的執行。學員可以：</span></p>
<ul data-end="1206" data-start="931">
<li data-end="1022" data-start="931">
<p data-end="1022" data-start="933"><strong data-end="943" data-start="933">檢查錯誤訊息</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">仔細閱讀 Webots 提供的錯誤訊息，定位錯誤位置。</span></p>
</li>
<li data-end="1115" data-start="1024">
<p data-end="1115" data-start="1026"><strong data-end="1036" data-start="1026">使用除錯工具</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">利用 Webots 的 Console 與 Debug 工具，逐步執行程式碼，觀察變數值與執行流程。</span></p>
</li>
<li data-end="1206" data-start="1117">
<p data-end="1206" data-start="1119"><strong data-end="1127" data-start="1119">查閱文件</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">參考 Webots 的官方文件與範例程式碼，確保語法與 API 使用正確。</span></p>
</li>
</ul>
<hr data-end="1211" data-start="1208"/>
<h3>16. 如何將 Webots 世界（world）或機器人設定檔分享給他人，確保對方可順利開啟模擬？</h3>
<p data-end="1345" data-start="1267"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">分享 Webots 世界或機器人設定檔時，應包含以下內容：</span></p>
<ul data-end="1627" data-start="1347">
<li data-end="1444" data-start="1347">
<p data-end="1444" data-start="1349"><strong data-end="1365" data-start="1349">世界檔案（<code data-end="1362" data-start="1356">.wbt</code>）</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">包含場景與物件配置。</span></p>
</li>
<li data-end="1536" data-start="1446">
<p data-end="1536" data-start="1448"><strong data-end="1457" data-start="1448">控制器程式</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">位於 <code data-end="16" data-start="3">controllers</code> 資料夾中的程式碼。</span></p>
</li>
<li data-end="1627" data-start="1538">
<p data-end="1627" data-start="1540"><strong data-end="1548" data-start="1540">資源檔案</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">如模型、紋理等，確保路徑正確。</span></p>
</li>
</ul>
<p data-end="1707" data-start="1629"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">建議使用壓縮檔（如 <code data-end="16" data-start="10">.zip</code>）將整個專案資料夾打包，並分享給他人。</span></p>
<hr data-end="1712" data-start="1709"/>
<h3>17. 如果想讓機器人在模擬時產生聲音或播放音樂，Webots 提供哪些方法？</h3>
<p data-end="1836" data-start="1758"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 支援在模擬中播放聲音或音樂，方法包括：</span></p>
<ul data-end="2031" data-start="1838">
<li data-end="1936" data-start="1838">
<p data-end="1936" data-start="1840"><strong data-end="1857" data-start="1840">使用 <code data-end="1852" data-start="1845">Sound</code> 節點</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在世界檔案中，加入 <code data-end="17" data-start="10">Sound</code> 節點，指定音效檔案與播放參數。</span></p>
</li>
<li data-end="2031" data-start="1938">
<p data-end="2031" data-start="1940"><strong data-end="1952" data-start="1940">控制器中播放音效</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在控制器程式中，使用適當的 API 播放音效。</span></p>
</li>
</ul>
<p data-end="2111" data-start="2033"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">具體操作可參考 Webots 的官方文件與範例。</span></p>
<hr data-end="2116" data-start="2113"/>
<h3>18. 請說明如何在 Webots 中同時操作多個機器人，並讓它們各自執行不同控制器。</h3>
<p data-end="2244" data-start="2166"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中操作多個機器人並為其指定不同控制器，步驟如下：</span></p>
<ul data-end="2522" data-start="2246">
<li data-end="2336" data-start="2246">
<p data-end="2336" data-start="2248"><strong data-end="2257" data-start="2248">複製機器人</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在世界檔案中，複製所需數量的機器人節點。</span></p>
</li>
<li data-end="2428" data-start="2338">
<p data-end="2428" data-start="2340"><strong data-end="2349" data-start="2340">指定控制器</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在每個機器人節點中，設定 <code data-end="25" data-start="13">controller</code> 欄位，指定對應的控制器名稱。</span></p>
</li>
<li data-end="2522" data-start="2430">
<p data-end="2522" data-start="2432"><strong data-end="2443" data-start="2432">編寫控制器程式</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">為每個控制器編寫獨立的程式碼，確保其功能不互相干擾。</span></p>
</li>
</ul>
<p data-end="2602" data-start="2524"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 會為每個機器人啟動獨立的控制器執行緒，實現並行運行。</span></p>
<hr data-end="2607" data-start="2604"/>
<h3>19. 在 Webots 控制器中，如何獲得機器人的當前座標位置與朝向？</h3>
<p data-end="2728" data-start="2650"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 控制器中，可使用 Supervisor API 來獲取機器人的位置與朝向：</span></p>
<ul data-end="2918" data-start="2730">
<li data-end="2823" data-start="2730">
<p data-end="2823" data-start="2732"><strong data-end="2740" data-start="2732">取得位置</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">使用 <code data-end="36" data-start="3">wb_supervisor_node_get_position</code> 函數，傳入機器人節點，返回位置向量。</span><span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a alt="https://github.com/cyberbotics/webots/blob/master/docs/reference/supervisor.md?utm_source=chatgpt.com" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[0.5625em] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out" href="https://github.com/cyberbotics/webots/blob/master/docs/reference/supervisor.md?utm_source=chatgpt.com" rel="noopener" target="_blank"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between absolute"><span class="max-w-full grow truncate overflow-hidden text-center">github.com</span><span class="-me-1 flex h-full items-center rounded-full px-1 text-[#8F8F8F]">+3</span></span><span class="flex h-4 w-full items-center justify-between"><span class="max-w-full grow truncate overflow-hidden text-center">github.com</span><span class="-me-1 flex h-full items-center rounded-full px-1 text-[#8F8F8F]">+3</span></span><span class="flex h-4 w-full items-center justify-between absolute"><span class="max-w-full grow truncate overflow-hidden text-center">github.com</span><span class="-me-1 flex h-full items-center rounded-full px-1 text-[#8F8F8F]">+3</span></span></span></a></span></span></p>
</li>
<li data-end="2918" data-start="2825">
<p data-end="2918" data-start="2827"><strong data-end="2835" data-start="2827">取得朝向</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">使用 <code data-end="39" data-start="3">wb_supervisor_node_get_orientation</code> 函數，傳入機器人節點，返回旋轉矩陣。</span></p>
</li>
</ul>
<p data-end="3002" data-start="2920"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這些資訊有助於進行導航與避障等功能的實現。</span></p>
<hr data-end="3007" data-start="3004"/>
<h3>20. 請說明 Webots 控制器中感測器資料的單位（例如距離感測器、加速度計），以及如何正確解讀。</h3>
<p data-end="3147" data-start="3065"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中，常見感測器的資料單位如下：</span></p>
<ul data-end="3338" data-start="3149">
<li data-end="3243" data-start="3149">
<p data-end="3243" data-start="3151"><strong data-end="3160" data-start="3151">距離感測器</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">返回與物體的距離，單位為米（m）。</span></p>
</li>
<li data-end="3338" data-start="3245">
<p data-end="3338" data-start="3247"><strong data-end="3255" data-start="3247">加速度計</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">返回加速度數值，單位為公尺每平方秒（m/s²）。</span></p>
</li>
</ul>
<p data-end="3422" data-start="3340"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在解讀感測器資料時，需注意其單位，並根據需要進行轉換與處理。</span></p>
<hr data-end="3427" data-start="3424"/>
<h3>21. 如果想要錄製 Webots 模擬畫面並輸出成影片檔，該如何操作？</h3>
<p data-end="3552" data-start="3470"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">Webots 提供錄製模擬畫面的功能，操作步驟如下：</span></p>
<ul data-end="3837" data-start="3554">
<li data-end="3647" data-start="3554">
<p data-end="3647" data-start="3556"><strong data-end="3564" data-start="3556">啟動錄製</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 的工具列中，點擊錄製按鈕，開始錄製模擬畫面。</span></p>
</li>
<li data-end="3742" data-start="3649">
<p data-end="3742" data-start="3651"><strong data-end="3659" data-start="3651">停止錄製</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">錄製完成後，再次點擊錄製按鈕，停止錄製。</span></p>
</li>
<li data-end="3837" data-start="3744">
<p data-end="3837" data-start="3746"><strong data-end="3754" data-start="3746">保存影片</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">系統會提示保存影片檔案，選擇儲存位置與檔名。</span></p>
</li>
</ul>
<p data-end="3921" data-start="3839"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">錄製的影片檔案格式為 <code data-end="17" data-start="11">.avi</code> 或 <code data-end="26" data-start="20">.mp4</code>，可供後續觀看或分享。</span></p>
<hr data-end="3926" data-start="3923"/>
<h3>22. Webots 中的 PROTO 文件有什麼作用？與 world 檔（.wbt）的關係為何？</h3>
<p data-end="4064" data-start="3982"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">PROTO 文件用於定義自訂的節點類型，具有以下作用：</span></p>
<ul data-end="4257" data-start="4066">
<li data-end="4161" data-start="4066">
<p data-end="4161" data-start="4068"><strong data-end="4078" data-start="4068">封裝複雜結構</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">將多個節點組合成一個自訂節點，方便重複使用。</span></p>
</li>
<li data-end="4257" data-start="4163">
<p data-end="4257" data-start="4165"><strong data-end="4174" data-start="4165">參數化設計</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">透過定義欄位，允許在實例化時設定不同的參數。</span></p>
</li>
</ul>
<p data-end="4341" data-start="4259"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 world 檔中，可使用 <code data-end="22" data-start="15">PROTO</code> 節點來實例化這些自訂節點，並設定其參數。</span></p>
<hr data-end="4346" data-start="4343"/>
<h3>23. 請說明如何在 Webots 中設定機器人的初始位置和方向。</h3>
<p data-end="4469" data-start="4387"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在 Webots 中，可透過以下方式設定機器人的初始位置與方向：</span></p>
<ul data-end="4659" data-start="4471">
<li data-end="4564" data-start="4471">
<p data-end="4564" data-start="4473"><strong data-end="4481" data-start="4473">設定位置</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在機器人節點中，設定 <code data-end="24" data-start="11">translation</code> 欄位，指定初始位置的座標。</span></p>
</li>
<li data-end="4659" data-start="4566">
<p data-end="4659" data-start="4568"><strong data-end="4576" data-start="4568">設定方向</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在機器人節點中，設定 <code data-end="21" data-start="11">rotation</code> 欄位，指定初始朝向的旋轉角度。</span></p>
</li>
</ul>
<p data-end="4743" data-start="4661"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">這些設定會在模擬開始時生效，決定機器人的起始狀態。</span></p>
<hr data-end="4748" data-start="4745"/>
<h3>24. 在 Tutorial1 或 Tutorial2 中，如何讓機器人執行預設外的自訂動作？</h3>
<p data-end="4885" data-start="4803"><span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">要讓機器人執行自訂動作，可進行以下操作：</span></p>
<ul data-end="5080" data-start="4887">
<li data-end="4983" data-start="4887">
<p data-end="4983" data-start="4889"><strong data-end="4900" data-start="4889">修改控制器程式</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">在控制器程式中，加入新的行為邏輯，例如根據感測器資料決定移動方向。</span></p>
</li>
<li data-end="5080" data-start="4985">
<p data-end="5080" data-start="4987"><strong data-end="4997" data-start="4987">設定事件觸發</strong>：<span class="relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out">根據時間或感測器輸入，觸發不同的動作，例如避開障礙物或轉向。</span></p>
</li>
</ul>
<p data-end="5100" data-start="5082">這樣可以使機器人具備更靈活的行為模式</p>
<p><br/>25. <strong data-end="71" data-start="41">Webots 支援哪些主流程控制語言？各有何優缺點？</strong></p>
<p data-end="99" data-start="73">Webots 支援多種程式語言作為控制器語言，包括：</p>
<div class="_tableContainer_16hzy_1">
<div class="_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse" tabindex="-1">
<table class="w-fit min-w-(--thread-content-width)" data-end="1039" data-start="101">
<thead data-end="252" data-start="101">
<tr data-end="252" data-start="101">
<th data-col-size="sm" data-end="112" data-start="101">語言</th>
<th data-col-size="sm" data-end="181" data-start="112">優點</th>
<th data-col-size="sm" data-end="252" data-start="181">缺點</th>
</tr>
</thead>
<tbody data-end="1039" data-start="413">
<tr data-end="537" data-start="413">
<td data-col-size="sm" data-end="426" data-start="413"><strong data-end="424" data-start="415">C/C++</strong></td>
<td data-col-size="sm" data-end="477" data-start="426">效能高、API 完整、可與底層硬體/資料結構整合</td>
<td data-col-size="sm" data-end="537" data-start="477">語法相對複雜，開發與除錯時間長</td>
</tr>
<tr data-end="659" data-start="538">
<td data-col-size="sm" data-end="551" data-start="538"><strong data-end="550" data-start="540">Python</strong></td>
<td data-col-size="sm" data-end="601" data-start="551">語法簡單、開發快速、適合教學與原型開發</td>
<td data-col-size="sm" data-end="659" data-start="601">效能較低，不適合需要即時反應的場景</td>
</tr>
<tr data-end="793" data-start="660">
<td data-col-size="sm" data-end="673" data-start="660"><strong data-end="670" data-start="662">Java</strong></td>
<td data-col-size="sm" data-end="732" data-start="673">結構清晰、跨平台特性強</td>
<td data-col-size="sm" data-end="793" data-start="732">使用較少，社群與資源較 Python 和 C/C++ 少</td>
</tr>
<tr data-end="915" data-start="794">
<td data-col-size="sm" data-end="807" data-start="794"><strong data-end="806" data-start="796">MATLAB</strong></td>
<td data-col-size="sm" data-end="859" data-start="807">適合控制理論與數值模擬，便於與 Simulink 整合</td>
<td data-col-size="sm" data-end="915" data-start="859">授權限制，效能受限，不支援所有 Webots 功能</td>
</tr>
<tr data-end="1039" data-start="916">
<td data-col-size="sm" data-end="929" data-start="916"><strong data-end="925" data-start="918">ROS</strong></td>
<td data-col-size="sm" data-end="979" data-start="929">可與 ROS 生態系整合、支援真實硬體與模擬結合</td>
<td data-col-size="sm" data-end="1039" data-start="979">設定與整合較複雜，學習曲線陡峭</td>
</tr>
</tbody>
</table>
</div>
</div>
<hr data-end="1044" data-start="1041"/>
<p><br/>26. <strong data-end="1091" data-start="1054">機器人控制器程式如何與其他程式（如資料記錄、遠端伺服器）進行通訊？</strong></p>
<p data-end="1109" data-start="1093">控制器與外部系統的通訊方式包括：</p>
<ul data-end="1408" data-start="1111">
<li data-end="1255" data-start="1111">
<p data-end="1153" data-start="1113"><strong data-end="1135" data-start="1113">Socket 通訊（TCP/UDP）</strong>：常見用於與伺服器、資料庫交換資訊。</p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span><span class="hljs-keyword">import</span></span><span> socket s = socket.socket() s.connect((</span><span><span class="hljs-string">'host'</span></span><span>, port)) s.send(</span><span><span class="hljs-string">b'data'</span></span><span>) </span></span></code></div>
</div>
</li>
<li data-end="1308" data-start="1259">
<p data-end="1308" data-start="1261"><strong data-end="1272" data-start="1261">HTTP 請求</strong>：使用 <code data-end="1286" data-start="1276">requests</code> 等函式庫與 RESTful API 通訊。</p>
</li>
<li data-end="1370" data-start="1310">
<p data-end="1370" data-start="1312"><strong data-end="1330" data-start="1312">MQTT、ROS Topic</strong>：若使用 ROS，透過發送 topic 或 service 調用與其他節點互動。</p>
</li>
<li data-end="1408" data-start="1372">
<p data-end="1408" data-start="1374"><strong data-end="1382" data-start="1374">檔案輸出</strong>：將資料寫入 CSV 或 TXT，再由其他程式讀取。</p>
</li>
</ul>
<hr data-end="1413" data-start="1410"/>
<p><br/>27. <strong data-end="1461" data-start="1423">Webots 的模擬世界中燈光和陰影設定如何影響感測器或相機的數據？</strong></p>
<p data-end="1481" data-start="1463">燈光和陰影會直接影響以下感測器輸出：</p>
<ul data-end="1587" data-start="1483">
<li data-end="1526" data-start="1483">
<p data-end="1526" data-start="1485"><strong data-end="1492" data-start="1485">攝影機</strong>：亮度不足或光線反射會造成圖像模糊、過曝或黑影，降低影像辨識準確性。</p>
</li>
<li data-end="1558" data-start="1527">
<p data-end="1558" data-start="1529"><strong data-end="1544" data-start="1529">距離感測器（如紅外線）</strong>：可能因陰影導致測量不準確。</p>
</li>
<li data-end="1587" data-start="1559">
<p data-end="1587" data-start="1561"><strong data-end="1570" data-start="1561">顏色感測器</strong>：在不同光照下，顏色感應可能偏差。</p>
</li>
</ul>
<p data-end="1599" data-start="1589">🛠 <strong data-end="1598" data-start="1592">解法</strong>：</p>
<ul data-end="1669" data-start="1600">
<li data-end="1630" data-start="1600">
<p data-end="1630" data-start="1602">增加環境光（ambient light）或指定光源方向。</p>
</li>
<li data-end="1669" data-start="1631">
<p data-end="1669" data-start="1633">使用 <code data-end="1656" data-start="1636">Camera recognition</code> 模式輔助，減少光影干擾。</p>
</li>
</ul>
<hr data-end="1674" data-start="1671"/>
<p><br/>28. <strong data-end="1725" data-start="1684">如何在 Webots 中調整機器人或感測器的物理參數（如質量、摩擦係數）？</strong></p>
<p data-end="1757" data-start="1727">可在世界檔（<code data-end="1739" data-start="1733">.wbt</code>）或 PROTO 檔中設定以下參數：</p>
<ul data-end="2027" data-start="1759">
<li data-end="1867" data-start="1759">
<p data-end="1768" data-start="1761"><strong data-end="1767" data-start="1761">質量</strong>：</p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">plaintext</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-plaintext"><span><span>DEF MY_ROBOT Robot { ... physics Physics { mass 1.2 } } </span></span></code></div>
</div>
</li>
<li data-end="1998" data-start="1869">
<p data-end="1912" data-start="1871"><strong data-end="1879" data-start="1871">摩擦係數</strong>：<br/> 在 <code data-end="1904" data-start="1885">ContactProperties</code> 中設置，例如：</p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">plaintext</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-plaintext"><span><span>ContactProperties { coulombFriction 0.8 bounce 0.0 } </span></span></code></div>
</div>
</li>
<li data-end="2027" data-start="2000">
<p data-end="2027" data-start="2002"><strong data-end="2016" data-start="2002">彈性、阻尼等物理屬性</strong>也可透過相應欄位設定。</p>
</li>
</ul>
<hr data-end="2032" data-start="2029"/>
<p><br/>29. <strong data-end="2090" data-start="2042">請說明如何使用 Webots 的 Console 與 Debug 工具協助程式錯誤排除。</strong></p>
<ul data-end="2321" data-start="2092">
<li data-end="2155" data-start="2092">
<p data-end="2155" data-start="2094"><strong data-end="2108" data-start="2094">Console 輸出</strong>：可使用 <code data-end="2122" data-start="2113">print()</code>（Python）或 <code data-end="2142" data-start="2132">printf()</code>（C）觀察變數或執行流程。</p>
</li>
<li data-end="2244" data-start="2156">
<p data-end="2171" data-start="2158"><strong data-end="2170" data-start="2158">Debug 模式</strong>：</p>
<ul data-end="2244" data-start="2174">
<li data-end="2203" data-start="2174">
<p data-end="2203" data-start="2176">在 Webots 中啟用「Pause」模式，逐步播放。</p>
</li>
<li data-end="2244" data-start="2206">
<p data-end="2244" data-start="2208">檢查 Simulation &gt; Console 視窗中是否出現錯誤訊息。</p>
</li>
</ul>
</li>
<li data-end="2280" data-start="2245">
<p data-end="2280" data-start="2247"><strong data-end="2262" data-start="2247">控制器日誌（logs）</strong>：自動儲存控制器執行錯誤，便於追蹤。</p>
</li>
<li data-end="2321" data-start="2281">
<p data-end="2321" data-start="2283"><strong data-end="2300" data-start="2283">Supervisor 支援</strong>：可以在模擬中隨時重設物件狀態，有助除錯。</p>
</li>
</ul>
<hr data-end="2326" data-start="2323"/>
<p><br/>30. <strong data-end="2374" data-start="2336">Tutorial1、2 裡的機器人遇到物體時，碰撞偵測機制如何運作？</strong></p>
<p data-end="2396" data-start="2376">Webots 透過以下方式進行碰撞偵測：</p>
<ul data-end="2543" data-start="2398">
<li data-end="2448" data-start="2398">
<p data-end="2448" data-start="2400"><strong data-end="2419" data-start="2400">物理引擎（ODE）模擬真實碰撞</strong>：每個機器人部件皆有碰撞形狀（bounding box）。</p>
</li>
<li data-end="2502" data-start="2449">
<p data-end="2502" data-start="2451"><strong data-end="2474" data-start="2451">觸覺感測器（Touch Sensor）</strong>：可選擇設置在物體或輪子上，用以偵測是否與其他物體接觸。</p>
</li>
<li data-end="2543" data-start="2503">
<p data-end="2543" data-start="2505"><strong data-end="2523" data-start="2505">distanceSensor</strong> 雖非物理碰撞，但也可預測「接近狀態」。</p>
</li>
</ul>
<p data-end="2575" data-start="2545">碰撞時會自動處理反作用力與位置變化，機器人可能會停下或彈回。</p>
<hr data-end="2580" data-start="2577"/>
<p><br/>31. <strong data-end="2631" data-start="2590">若要將 Webots 模擬結果導出並進行數據分析，你會選擇哪些方法與工具？</strong></p>
<p data-end="2643" data-start="2633">導出與分析方式包括：</p>
<ul data-end="2970" data-start="2645">
<li data-end="2768" data-start="2645">
<p data-end="2675" data-start="2647"><strong data-end="2658" data-start="2647">控制器寫檔輸出</strong>：將感測器數據寫入 CSV 檔案。</p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">python</div>
<div class="sticky top-9">
<div class="absolute end-0 bottom-0 flex h-9 items-center pe-2">
<div class="bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs"></div>
</div>
</div>
<div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-python"><span><span><span class="hljs-keyword">with</span></span><span> </span><span><span class="hljs-built_in">open</span></span><span>(</span><span><span class="hljs-string">"data.csv"</span></span><span>, </span><span><span class="hljs-string">"w"</span></span><span>) </span><span><span class="hljs-keyword">as</span></span><span> f: f.write(</span><span><span class="hljs-string">f"<span class="hljs-subst">{sensor.getValue()}</span></span></span><span>\n") </span></span></code></div>
</div>
</li>
<li data-end="2810" data-start="2770">
<p data-end="2810" data-start="2772"><strong data-end="2801" data-start="2772">Supervisor 寫入 JSON 或 YAML</strong>：便於跨語言解析。</p>
</li>
<li data-end="2852" data-start="2812">
<p data-end="2852" data-start="2814"><strong data-end="2835" data-start="2814">Webots Logging 功能</strong>：儲存模擬資料以供圖像、路徑分析。</p>
</li>
<li data-end="2970" data-start="2854">
<p data-end="2866" data-start="2856"><strong data-end="2865" data-start="2856">後處理工具</strong>：</p>
<ul data-end="2970" data-start="2869">
<li data-end="2899" data-start="2869">
<p data-end="2899" data-start="2871">使用 <strong data-end="2891" data-start="2874">Python/pandas</strong> 進行資料分析。</p>
</li>
<li data-end="2931" data-start="2902">
<p data-end="2931" data-start="2904">用 <strong data-end="2916" data-start="2906">MATLAB</strong> 匯入 CSV 分析時間序列。</p>
</li>
<li data-end="2970" data-start="2934">
<p data-end="2970" data-start="2936">可搭配 <strong data-end="2960" data-start="2940">Jupyter Notebook</strong> 建立互動分析介面。</p>
</li>
</ul>
</li>
</ul>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><a href="/downloads/四連桿圖檔.7z">四連桿圖檔</a></p>
<p><a href="/downloads/four.7z">有問題的四連桿wbt</a></p>
<p>不知道哪裡出問題link2會一直跑掉</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CJQTDYcZBz8?si=RwmnfZMDv3CKujRS" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/fourbarlinks.7z">四連桿webot</a></p>
<p>將圖檔重新繪製後經過多次詢問chatgpt終於成功了</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-mkf383NmFo?si=xTBchBmQUVhJ-vnk" title="YouTube video player" width="560"></iframe></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p></p>
<p>操作影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/cCxOhjpIJnU?si=kKBWcVANK_E5LGw6" title="YouTube video player" width="560"></iframe></p>
<p>製作過程</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Hbtoo-ljay4?si=z23lqcmGimQdjbtq" title="YouTube video player" width="560"></iframe></p>
<p>對於HW3的內容毫無頭緒只能看著老師給的範例檔案一步一步去看要怎麼連接每個joint跟零件，做出來後還是有點問題，最後沒有完整做出來只能拿老師給的範例去把零件改成自己的</p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:week1,2都在建立個人及小組倉儲，修改舊python改成新版本</p>
<p>            week3,4週完成task的任務，編寫程式<span>列出學員的作業倉儲與網頁連結, 以及各分組的倉儲及網站連結，找出未分組的學員名單</span></p>
<p><span>            week5,6用 Brython 寫出在 id="brython_div1" 嵌入 html 連結的程式. 希望各連結能透過 http 協定連結到班上有 66 位學員的靜態網頁. 其中各學員的固定 IPv6 分別為 2001:288:6004:17:fff1:cd25:0000:b001 到 2001:288:6004:17:fff1:cd25:0000:b066, 且使用 port 8000 進行連結的Brython 程式。</span></p>
<p><span>            week7,8繪製四連桿機構的圖檔，開始建立webot場景，完成HW1的建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><span>            week9，HW2利用自己繪製的 CAD 零件組成的平面四連桿機構 Webots 模擬場景，利用自己繪製的CAD建立場景遇到非常多狀況，在利用chatgpt不斷修改才完成HW2</span></p>
<p>各週網頁內容:</p>
<p>w1,2</p>
<p><img alt="" height="252" src="/images/螢幕擷取畫面 2025-04-21 160854.png" width="548"/></p>
<p>w3,4</p>
<p><img alt="" height="297" src="/images/螢幕擷取畫面 2025-04-21 161433.png" width="564"/></p>
<p>w5,6</p>
<p><img alt="" height="273" src="/images/螢幕擷取畫面 2025-04-21 161129.png" width="544"/></p>
<p><img alt="" height="276" src="/images/螢幕擷取畫面 2025-04-21 161142.png" width="550"/></p>
<p>w7,8</p>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2025-04-21 161153.png" width="443"/></p>
<p><img alt="" height="219" src="/images/螢幕擷取畫面 2025-04-21 161205.png" width="450"/></p>
<p><img alt="" height="330" src="/images/螢幕擷取畫面 2025-04-21 161854.png" width="482"/></p>
<p>w9</p>
<p><img alt="" height="414" src="/images/螢幕擷取畫面 2025-04-21 161904.png" width="547"/></p>
<p></p>
<p>期中心得:</p>
<p>這次重修用了跟前年是不一樣的程式，在操作上有許多不熟悉的地方，多數都是靠詢問chatgpt解決大部分遇到的狀況，雖然沒有到很熟悉但還是有盡量跟上上課的進度</p>
<p>期中自評影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0dpY6aja9Jc?si=vUk_5aW2ZyjZn-Nw" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<p><a href="/downloads/exam1.7z">EXAM1完整檔案</a></p>
<p>EXAM1線架構圖</p>
<p><img alt="" height="305" src="/images/螢幕擷取畫面 2025-05-15 094403.png" width="567"/></p>
<p>操作影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NkjVch2xUgw?si=WKezCoRYsXm4LcGv" title="YouTube video player" width="560"></iframe></p>
<p>製作過程</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/iC8OJmPxJdU?si=aQoFTJPgmkJXZkMU" title="YouTube video player" width="560"></iframe></p>
<p><span>加入Robot</span><br/><span>新增solid在children中新建shape</span><br/><span>命名為base</span><br/><span>在base建立1,0.1,0.1的shape</span></p>
<p>建立Hingejoint命名為joint1在endpoint建立soild</p>
<p>children中建立pose</p>
<p>在pose中的children建立<span>0.4,0.1,0.1的shape</span><br/><span>joint1，調整axis(0,0,1),anchor(-0.5,0,0)</span><br/><span>調整位置(-0.5,0,0)與角度(0,0,1,0.558)學號後兩碼為32</span><br/><span>新增馬達命名為 motor</span><br/><span>在joint1加入新的Hingejoint命名為joint2</span></p>
<p>一樣新增soild後新增pose<span>建立0.6,0.1,0.1的shape</span><br/><span>還要再建一個0.3,0.1,0.1的方塊</span><br/><span>調整位置(0.4,0,0.1)與角度(0,0,1,0.66)</span><br/><span>joint2，調整axis(0,0,1),anchor(0.4,0,0)</span><br/><span>在joint2加入新的Hingejoint命名為joint3</span></p>
<p><span>新增soild後新增pose</span><span>建立</span><span>0.9,0.1,0.1的shape</span><br/><span>調整位置(0.6,0,-0.1)與角度(0,0,-1,2.26)</span><br/><span>joint3，調整axis(0,0,1),anchor(0.6,0,0)</span><br/><span>在link3_shape加入新的Hingejoint命名為joint4</span><br/><span>新增SolidReference接到static environment</span><br/><span>joint4調整axis(0,0,1),anchor(0.9,0,0)</span><br/><span>joint1、2、3分別開啟bounding 以及physics</span><br/><span>加入controller</span></p>
<p>在製作EXAM1的時候一樣出現link3無法固定的問題，在多次檢查過後發現是joint3的旋轉軸忘記改了，可能之前遇到的問題就是某個旋轉軸忘記改導致他鎖死或無法固定，如過在製作過程中沒仔細把每個步驟都做好事後檢查可能會很難找出問題，要一個一個慢慢看會看錯或是漏掉一些小地方。</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<p><a href="/downloads/exam2.7z">EXAM2檔案</a></p>
<p>EXAM2-線架構圖</p>
<p><img alt="" height="267" src="/images/螢幕擷取畫面 2025-05-20 005429.png" width="507"/></p>
<p>零件組合圖</p>
<p><img alt="" height="294" src="/images/螢幕擷取畫面 2025-05-20 005807.png" width="541"/></p>
<p>操作步驟:</p>
<p><span>加入Robot</span><br/><span>新增兩個solid在children中新建Cadshape</span><br/><span>命名為base1，base2</span></p>
<p>建立兩個Hingejoint命名為joint1在endpoint建立soild</p>
<p>children建立Cad<span>shape</span><br/><span>joint1，調整axis(0,0,1)</span><br/><span>新增馬達命名為 motor</span><br/><span>在joint1加入新的Hingejoint命名為joint2</span></p>
<p>一樣新增soild後<span>建立Cadshape</span><br/><span>joint2，調整axis(0,0,1),anchor(1.1194,0.6995,0)</span><br/><span>在joint2加入新的Hingejoint命名為joint3</span></p>
<p><span>新增soild後</span><span>建立Cad</span><span>shape</span><br/><span>joint3，調整axis(0,0,1),anchor(2.656,1.9001,0)</span><br/><span>新增Hingejoint命名為joint4</span><br/><span>新增SolidReference接到link3</span><br/><span>joint4調整axis(0,0,1),anchor(1.65,0,0)</span><br/><span>joint1、2、3分別開啟bounding 以及physics</span><br/><span>加入controller</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/B5o3N0cd-Yw?si=uLs-2K3HOnI31OaZ" title="YouTube video player" width="560"></iframe></p>
<p>製作過程影片(重新畫的圖檔製作過程沒錄影所以放尺寸錯誤的影片)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5XSo21iZC5w?si=qel6eFBDJrMQoh5b" title="YouTube video player" width="560"></iframe></p>
<p>在製作EXAM2時過程滿順利的但做完發現完全沒辦法動，然後我又重新做了好幾遍結果也都是一樣，後來發現可能是我的四連桿尺寸設計有問題導致他無法正常運作，再參考其他同學的尺寸後把整個圖重新繪製後也是順利做出來</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<p>EXAM3-1</p>
<p>在控制台設好自己的<span>IPv6</span>網址關掉<span>IPv4</span>網址以<span> webotsw --stream </span>啟動個人所完成的<span> HW1 </span>模擬系統查看各自<span>webots</span>的端口在網頁上輸入<span>http:[</span>自己的<span>IPv6</span>網址<span>]:</span>查看各自<span>webots</span>的端口<span>/index.html</span>在<span>Connect to</span>內輸入<span>[</span>自己的<span>IPv6</span>網址<span>]: </span>查看各自<span>webots</span>的端口按下<span>Connect</span>即可看到自己<span>webots</span>的畫面按下<span>Disconnec</span>到<span>Connect to</span>內輸入<span>[</span>組員的<span>IPv6</span>網址<span>]: </span>組員<span>webots</span>的端口</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/T1t37uPoFT0?si=SXMHYV5HzWdfA8t0" title="YouTube video player" width="560"></iframe></p>
<p>一開始在修改IPV6時改了錯的網路IP導致只能連上自己的畫面卻沒辦法連到別人的，發現問題後就很順利的看到組員的畫面了</p>
<p>EXAM3-2</p>
<p><span>在控制台設好自己的</span><span>IPv6</span><span>網址</span><span>關掉</span><span>IPv4</span><span>網址 </span><span>以</span><span> webotsw --stream </span><span>啟動<span>七段顯示器進行修改</span></span><span>模擬系統 </span><span>查看各自</span><span>webots</span><span>的端口 </span><span>在網頁上輸入</span><span>http:[</span><span>自己的</span><span>IPv6</span><span>網址</span><span>]:</span><span>查看各自</span><span>webots</span><span>的端口</span><span>/index.html </span><span>在</span><span>Connect to</span><span>內輸入</span><span>[</span><span>自己的</span><span>IPv6</span><span>網址</span><span>]: </span><span>查看各自</span><span>webots</span><span>的端口</span><span>按下</span><span>Connect</span><span>即可看到自己</span><span>webots</span><span>的畫面</span><span>按下</span><span>Disconnec</span><span>到</span><span>Connect to</span><span>內輸入</span><span>[</span><span>組員的</span><span>IPv6</span><span>網址</span><span>]: </span><span>組員</span><span>webots</span><span>的端口</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/GrM6Ry_z58w?si=4HGrRPomRB76QIFX" title="YouTube video player" width="560"></iframe></p>
<p>第二個大致跟第一相同只是變成修改七段顯示器秀出自己學號而已沒遇到什麼困難</p>
<p>EXAM3-3</p>
<p><span>在控制台設好自己的</span><span>IPv6</span><span>網址</span><span>關掉</span><span>IPv4</span><span>網址 </span><span>以</span><span> webotsw --stream</span></p>
<p>執行指令pip install websocket-client websocket-server keyboard</p>
<p>組長開啟youbot_cart_w10_websocket.7z場景</p>
<p><span>組長把場景中的controller選 youbot_cart_server.py並把server_ip = "yout_ipv6_address改成server_ip = "::"</span></p>
<p><span>組員執行python youbot_cartclient.py並把IP設定成組長的IP</span></p>
<p><span>在網頁上輸入<span>http:[自己</span><span>的</span><span>IPv6</span><span>網址</span><span>]:</span><span>查看各自</span><span>webots</span><span>的端口</span><span>/index.html </span><span>在</span><span>Connect to</span><span>內輸入</span><span>[組長</span><span>的</span><span>IPv6</span><span>網址</span><span>]: </span><span>查看各自</span><span>webots</span><span>的端口</span><span>按下</span><span>Connect</span><span>即可看到組長</span><span>webots畫面</span></span></p>
<p><span><span>按下上下左右即可操作機器人</span></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/GacX6dC12pA?si=2v_ZS_ya1lffXW7B" title="YouTube video player" width="560"></iframe></p>
<p>對於要怎麼利用<span>websocket連線操作一開始完全沒頭緒在看其他同學的操作步驟後順利連線上了</span></p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h2>Final process</h2>
<p>06/13：</p>
<p>修改feed_ball_loop.py參數餵球上限：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller 
# ----------------- 參數區 -----------------
HOOP_CENTER = [0.622, -0.103, 0.742838]
BALL_DEF_PATTERN = re.compile(r"Sphere_\d+")
supervisor = Supervisor()
timestep = int(supervisor.getBasicTimeStep())
keyboard = Keyboard()
keyboard.enable(timestep)
MAX_BALLS_ALLOWED = 3
ball_count = 0
warning_shown = False
landed_balls = []  # [(def_name, landed_time)]
DELETE_DELAY = 2.0  # 秒
# ----------------- 建立靜態球體 -----------------
def create_static_sphere(supervisor, x, y, z):
    global waiting_ball_def, waiting_ball_info, ball_count, warning_shown
    if ball_count &gt;= MAX_BALLS_ALLOWED:
        if not warning_shown:
            print(f"球數已達上限 ({MAX_BALLS_ALLOWED})，請謹慎地擊出最後一球。")
            warning_shown = True
        return

    warning_shown = False  # 可以新增球，代表之前的提示已失效
    def_name = generate_valid_def_name()
    waiting_ball_def = def_name
    r, g, b = generate_random_color()
    world_pos = youbot_local_to_world((x, y, z))
    waiting_ball_info = (world_pos, r, g, b)
    create_static_ball(def_name, world_pos, r, g, b)
    ball_count += 1
# ----------------- 定義球落地 -----------------
def is_ball_landed(pos, threshold_z=0.13):
    return pos[2] &lt; threshold_z

print("按 A 產生一顆靜止球，按 M 讓球變 dynamic 可擊出（自動與手動均可，多5個軌跡點，球落地後軌跡自動消失）")

while supervisor.step(timestep) != -1:
    # 1. 處理 auto_loop.py 傳來的自動訊息
    while receiver.getQueueLength() &gt; 0:
        msg = receiver.getString()
        if msg == "a":
            if waiting_ball_def is None:
                create_static_sphere(supervisor, *default_feed_pos)
                current_tracked_def = waiting_ball_def
                delete_trajectory_points()
        elif msg == "m":
            activate_dynamic_ball()
        # "k" 可選，通常給擊球機構用，這邊可忽略或加狀態清理
        receiver.nextPacket()

    # 2. 處理手動鍵盤控制
    key = keyboard.getKey()
    current_time = time.time()
    if key == ord('A') and (current_time - last_key_time &gt;= debounce_time):
        if waiting_ball_def is None:
            create_static_sphere(supervisor, *default_feed_pos)
            current_tracked_def = waiting_ball_def
            delete_trajectory_points()
        else:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
        last_key_time = current_time
    if key == ord('M') and (current_time - last_key_time &gt;= debounce_time):
        activate_dynamic_ball()
        last_key_time = current_time

    # 3. 拋物線軌跡追蹤
    if current_tracked_def is not None:
        ball_node = supervisor.getFromDef(current_tracked_def)
        if ball_node is not None:
            pos = ball_node.getPosition()
            if current_time - last_print_time &gt;= PRINT_INTERVAL:
                last_print_time = current_time
            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) &gt; TRAJECTORY_POINT_STEP:
                def_name = create_trajectory_point(pos)
                trajectory_points.append((pos, def_name))
                if len(trajectory_points) &gt; TRAJECTORY_MAX_POINTS:
                    _, old_def = trajectory_points.pop(0)
                    node = supervisor.getFromDef(old_def)
                    if node:
                        node.remove()
            if is_ball_landed(pos):
                delete_trajectory_points()
                landed_balls.append((current_tracked_def, time.time()))
                current_tracked_def = None
                ball_count = max(0, ball_count - 1)



        else:
            delete_trajectory_points()
            current_tracked_def = None
# ----------------- 處理落地球延遲刪除 -----------------            
    now = time.time()
    for def_name, landed_time in landed_balls[:]:
        if now - landed_time &gt;= DELETE_DELAY:
            node = supervisor.getFromDef(def_name)
            if node:
                node.remove()
            landed_balls.remove((def_name, landed_time))</pre>
<p>Q：目前模擬結果無法刪除球sphere實體。</p>
<p>檔案：<a href="/downloads/2b-g9final.7z">2b-g9final.7z</a></p>
<p><span style="background-color: #ccffcc;">6/14</span></p>
<p>針對6/13的問題解方法 : 在外觀中把實體隱藏即可，這樣不會影響到需要用到的senser</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">appearance Appearance {
  material Material {
    transparency 1
  }
}</pre>
<p>啟動時發現的問題:</p>
<ul>
<li>若啟動後出現<span style="color: #ff6600;">cd2025_final_project_w17\controllers\feed_ball_loop\feed_ball_loop.py", line 4, in &lt;module&gt; <span style="color: #000000;">，需先在cmd中輸入 </span></span><code class="CodeBlock-module__codeWrap--npU94">pip --version  python --version 檢查有沒有安裝numpy ，如果沒有須輸入 </code><code class="CodeBlock-module__codeWrap--npU94">pip install numpy 。</code><code class="CodeBlock-module__codeWrap--npU94"></code></li>
</ul>
<p><code class="CodeBlock-module__codeWrap--npU94"><a href="/downloads/2b-g9final-1.zip">2b-g9final-1.zip</a></code></p>
<p><code class="CodeBlock-module__codeWrap--npU94">6/16</code></p>
<p><code class="CodeBlock-module__codeWrap--npU94">將cd2025_final_project_w17中的fourbar_controller跟stand_controller參考youbot_cart_w10_websocket中的youbot_cart_server.py修改能利用websocket連線的版本</code></p>
<p><code class="CodeBlock-module__codeWrap--npU94">並參考youbot_cart_client.py做出控制程式。</code></p>
<p><a href="https://gist.githubusercontent.com/YUN4/df3cc40ca1d938df40d5787e03795309/raw/4a731e82e2485b79d4813b4d3922eda7d62faab3/fourbarcontroller-server">fourbar_controller_server</a></p>
<p><a href="https://gist.githubusercontent.com/YUN4/5f93555b3232ac2b1d49b8f08dbf3209/raw/55bc3962edceb300f76982780f782d24720119e6/stand_controller_server">stand_controller_server</a></p>
<p><a href="https://gist.githubusercontent.com/YUN4/1446b8ad73d9ccff489dd2a9aeaa7886/raw/78de966f083e5c2912b7e0eb2b71b4adbfd5af6e/fourbarcontroller_client">fourbar_controller_client</a></p>
<p><a href="https://gist.githubusercontent.com/YUN4/f1f5bfcb62810e38f360f7a17bbefa3a/raw/cfa6070128de3004195cf9545078078beedfe3cf/standcontroller_client">stand_controller_client</a></p>
<p></p>
<p>ppt :<a href="/downloads/協同產品設計期末專案.7z">協同產品設計期末專案</a></p>
<p>pdf:<a href="/downloads/協同產品設計期末專案.pdf">協同產品設計期末報告</a></p>
<p>期末連線控制影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/WVqRGUEKGp0?si=46FnuINo9ffuuc8Y" title="YouTube video player" width="560"></iframe></p>
<p>最終成果畫面:</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_5lukZcxX9c?si=xTooDABrsuDHPf9y" title="YouTube video player" width="560"></iframe></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>